
contador.elf:     file format elf32-littlenios2
contador.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008224

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002284 memsz 0x00002284 flags r-x
    LOAD off    0x000032a4 vaddr 0x0000a2a4 paddr 0x0000a588 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x0000086c vaddr 0x0000a86c paddr 0x0000a86c align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002040  00008224  00008224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  0000a264  0000a264  00003264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  0000a2a4  0000a588  000032a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  0000a86c  0000a86c  0000386c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000a990  0000a990  00003588  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00003588  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005a8  00000000  00000000  000035b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00007b06  00000000  00000000  00003b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002df0  00000000  00000000  0000b666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00002349  00000000  00000000  0000e456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000aa4  00000000  00000000  000107a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000014d1  00000000  00000000  00011244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00012718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00012728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 00000f40  00000000  00000000  00012798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00000fd9  00000000  00000000  000136d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000001a3  00000000  00000000  000146b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  000161ce  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  000161d1  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000161d4  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000161d5  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000161d6  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000161df  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000161e8  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  000161f1  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000003a  00000000  00000000  000161fd  2**0
                  CONTENTS, READONLY
 28 .jdi          00004ad2  00000000  00000000  00016237  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003856c  00000000  00000000  0001ad09  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008224 l    d  .text	00000000 .text
0000a264 l    d  .rodata	00000000 .rodata
0000a2a4 l    d  .rwdata	00000000 .rwdata
0000a86c l    d  .bss	00000000 .bss
0000a990 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
0000825c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008394 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a2a4 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008c24 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00008d7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008ebc l     F .text	00000034 alt_dev_reg
0000a388 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000091bc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
000092bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000093f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009420 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000097bc l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000990c l     F .text	0000003c alt_get_errno
00009948 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000a88c g     O .bss	00000004 alt_instruction_exception_handler
00008d10 g     F .text	0000006c alt_main
0000a890 g     O .bss	00000100 alt_irq
0000a588 g       *ABS*	00000000 __flash_rwdata_start
0000834c g     F .text	00000048 printf
00009dc4 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a86c g     O .bss	00000004 errno
0000a874 g     O .bss	00000004 alt_argv
0001255c g       *ABS*	00000000 _gp
0000a3dc g     O .rwdata	00000180 alt_fd_list
00009de8 g     F .text	00000090 alt_find_dev
00009890 g     F .text	0000007c alt_io_redirect
0000a038 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00009038 g     F .text	000000ec altera_avalon_jtag_uart_read
00008310 g     F .text	0000003c _printf_r
00008b3c g     F .text	00000064 .hidden __udivsi3
0000a574 g     O .rwdata	00000004 alt_max_fd
0000a55c g     O .rwdata	00000004 _global_impure_ptr
0000a990 g       *ABS*	00000000 __bss_end
000096d4 g     F .text	000000e8 alt_iic_isr_register
00009c98 g     F .text	0000012c alt_tick
00009688 g     F .text	0000004c alt_ic_irq_enabled
00009bf4 g     F .text	000000a4 alt_alarm_stop
0000a87c g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080fc g     F .exceptions	000000c8 alt_irq_handler
0000a3b4 g     O .rwdata	00000028 alt_dev_null
000093d4 g     F .text	00000020 alt_dcache_flush_all
0000a588 g       *ABS*	00000000 __ram_rwdata_end
0000a56c g     O .rwdata	00000008 alt_dev_list
00008db8 g     F .text	00000104 write
0000a2a4 g       *ABS*	00000000 __ram_rodata_end
00008ba0 g     F .text	0000005c .hidden __umodsi3
0000a990 g       *ABS*	00000000 end
000081c4 g     F .exceptions	00000060 alt_instruction_exception_entry
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009238 g     F .text	00000084 alt_avalon_timer_sc_init
00009124 g     F .text	00000098 altera_avalon_jtag_uart_write
00008400 g     F .text	0000051c ___vfprintf_internal_r
0000a0fc g     F .text	0000012c __call_exitprocs
00008224 g     F .text	0000003c _start
0000a880 g     O .bss	00000004 _alt_tick_rate
0000a884 g     O .bss	00000008 _alt_nticks
00008f2c g     F .text	0000004c alt_sys_init
00008bfc g     F .text	00000028 .hidden __mulsi3
0000a2a4 g       *ABS*	00000000 __ram_rwdata_start
0000a264 g       *ABS*	00000000 __ram_rodata_start
00008f78 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009f80 g     F .text	000000b8 alt_get_fd
0000a0cc g     F .text	00000030 memcmp
0000a990 g       *ABS*	00000000 __alt_stack_base
00009e78 g     F .text	00000108 alt_find_file
0000945c g     F .text	000000a8 alt_dev_llist_insert
00008934 g     F .text	000000a8 __sfvwrite_small_dev
0000a86c g       *ABS*	00000000 __bss_start
00008260 g     F .text	00000068 main
0000a878 g     O .bss	00000004 alt_envp
00008fd8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a578 g     O .rwdata	00000004 alt_errno
00008a48 g     F .text	00000080 .hidden __divsi3
0000a264 g       *ABS*	00000000 __flash_rodata_start
00008ef0 g     F .text	0000003c alt_irq_init
00009b84 g     F .text	00000070 alt_release_fd
000089f8 g     F .text	00000050 _write_r
0000a560 g     O .rwdata	00000004 _impure_ptr
0000a870 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
000082c8 g     F .text	00000048 Delay
0000a564 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009524 g     F .text	00000050 alt_ic_isr_register
0000a588 g       *ABS*	00000000 _edata
0000a990 g       *ABS*	00000000 _end
00008224 g       *ABS*	00000000 __ram_exceptions_end
000095fc g     F .text	0000008c alt_ic_irq_disable
0000a0ac g     F .text	00000020 exit
00008ac8 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a228 g     F .text	0000003c _exit
000089dc g     F .text	0000001c strlen
00009a24 g     F .text	00000160 open
00009504 g     F .text	00000020 alt_icache_flush_all
0000a57c g     O .rwdata	00000004 alt_priority_mask
00009574 g     F .text	00000088 alt_ic_irq_enable
0000891c g     F .text	00000018 __vfprintf_internal
0000a580 g     O .rwdata	00000008 alt_alarm_list
000092f8 g     F .text	000000dc close
00008c8c g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608914 	ori	at,at,33316
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
    8094:	e93fff04 	addi	r4,ea,-4
    8098:	00081c40 	call	81c4 <alt_instruction_exception_entry>
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>
    80a0:	ebffff04 	addi	r15,ea,-4
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0ffff17 	ldw	r3,-4(fp)
    8130:	e0bffe17 	ldw	r2,-8(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001126 	beq	r2,zero,8180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	e0bffd17 	ldw	r2,-12(fp)
    8140:	100690fa 	slli	r3,r2,3
    8144:	00800074 	movhi	r2,1
    8148:	1885883a 	add	r2,r3,r2
    814c:	10ea2417 	ldw	r3,-22384(r2)
    8150:	e0bffd17 	ldw	r2,-12(fp)
    8154:	100890fa 	slli	r4,r2,3
    8158:	00800074 	movhi	r2,1
    815c:	2085883a 	add	r2,r4,r2
    8160:	10aa2517 	ldw	r2,-22380(r2)
    8164:	1009883a 	mov	r4,r2
    8168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    816c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bffb15 	stw	r2,-20(fp)
  return active;
    8178:	e0bffb17 	ldw	r2,-20(fp)
    817c:	00000706 	br	819c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
    8180:	e0bffe17 	ldw	r2,-8(fp)
    8184:	1085883a 	add	r2,r2,r2
    8188:	e0bffe15 	stw	r2,-8(fp)
      i++;
    818c:	e0bffd17 	ldw	r2,-12(fp)
    8190:	10800044 	addi	r2,r2,1
    8194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
    8198:	003fe406 	br	812c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
    819c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    81a0:	e0bfff17 	ldw	r2,-4(fp)
    81a4:	103fde1e 	bne	r2,zero,8120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81a8:	0001883a 	nop
}
    81ac:	0001883a 	nop
    81b0:	e037883a 	mov	sp,fp
    81b4:	dfc00117 	ldw	ra,4(sp)
    81b8:	df000017 	ldw	fp,0(sp)
    81bc:	dec00204 	addi	sp,sp,8
    81c0:	f800283a 	ret

000081c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81c4:	defffb04 	addi	sp,sp,-20
    81c8:	dfc00415 	stw	ra,16(sp)
    81cc:	df000315 	stw	fp,12(sp)
    81d0:	df000304 	addi	fp,sp,12
    81d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81d8:	00bfffc4 	movi	r2,-1
    81dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
    81e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81e4:	d0a0cc17 	ldw	r2,-31952(gp)
    81e8:	10000726 	beq	r2,zero,8208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81ec:	d0a0cc17 	ldw	r2,-31952(gp)
    81f0:	e0ffff17 	ldw	r3,-4(fp)
    81f4:	e1bffe17 	ldw	r6,-8(fp)
    81f8:	e17ffd17 	ldw	r5,-12(fp)
    81fc:	1809883a 	mov	r4,r3
    8200:	103ee83a 	callr	r2
    8204:	00000206 	br	8210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    820c:	0005883a 	mov	r2,zero
}
    8210:	e037883a 	mov	sp,fp
    8214:	dfc00117 	ldw	ra,4(sp)
    8218:	df000017 	ldw	fp,0(sp)
    821c:	dec00204 	addi	sp,sp,8
    8220:	f800283a 	ret

Disassembly of section .text:

00008224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8224:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8228:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    822c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8230:	d6895714 	ori	gp,gp,9564
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8234:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8238:	10aa1b14 	ori	r2,r2,43116

    movhi r3, %hi(__bss_end)
    823c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8240:	18ea6414 	ori	r3,r3,43408

    beq r2, r3, 1f
    8244:	10c00326 	beq	r2,r3,8254 <_start+0x30>

0:
    stw zero, (r2)
    8248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    824c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8250:	10fffd36 	bltu	r2,r3,8248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8254:	0008c8c0 	call	8c8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8258:	0008d100 	call	8d10 <alt_main>

0000825c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    825c:	003fff06 	br	825c <alt_after_alt_main>

00008260 <main>:
#include <stdlib.h>
#include <stdio.h>
#define LED_ADDR 0x00011020 //espacio de memoria leds
int main(void){
    8260:	defffc04 	addi	sp,sp,-16
    8264:	dfc00315 	stw	ra,12(sp)
    8268:	df000215 	stw	fp,8(sp)
    826c:	df000204 	addi	fp,sp,8
	volatile int *led = (int*)(LED_ADDR); //asignacion del puntero al espacio de memoria
    8270:	00800074 	movhi	r2,1
    8274:	10840804 	addi	r2,r2,4128
    8278:	e0bffe15 	stw	r2,-8(fp)
	int count=0; //contador que carga el valor en el LED
    827c:	e03fff15 	stw	zero,-4(fp)
	while (1){
		Delay (1000000);
    8280:	010003f4 	movhi	r4,15
    8284:	21109004 	addi	r4,r4,16960
    8288:	00082c80 	call	82c8 <Delay>
		count++;
    828c:	e0bfff17 	ldw	r2,-4(fp)
    8290:	10800044 	addi	r2,r2,1
    8294:	e0bfff15 	stw	r2,-4(fp)
		if (count==256)	{
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	10804018 	cmpnei	r2,r2,256
    82a0:	1000011e 	bne	r2,zero,82a8 <main+0x48>
			count = 0;
    82a4:	e03fff15 	stw	zero,-4(fp)
		}
		*(led) = count;
    82a8:	e0bffe17 	ldw	r2,-8(fp)
    82ac:	e0ffff17 	ldw	r3,-4(fp)
    82b0:	10c00015 	stw	r3,0(r2)
		printf("El numero es: %d \n ", count);
    82b4:	e17fff17 	ldw	r5,-4(fp)
    82b8:	01000074 	movhi	r4,1
    82bc:	21289904 	addi	r4,r4,-23964
    82c0:	000834c0 	call	834c <printf>
	while (1){
    82c4:	003fee06 	br	8280 <main+0x20>

000082c8 <Delay>:
	}
	return 0;
}

void Delay (int _Tiempo){
    82c8:	defffd04 	addi	sp,sp,-12
    82cc:	df000215 	stw	fp,8(sp)
    82d0:	df000204 	addi	fp,sp,8
    82d4:	e13ffe15 	stw	r4,-8(fp)
	int i = 0;
    82d8:	e03fff15 	stw	zero,-4(fp)
	while (i<_Tiempo){
    82dc:	00000306 	br	82ec <Delay+0x24>
		i++;
    82e0:	e0bfff17 	ldw	r2,-4(fp)
    82e4:	10800044 	addi	r2,r2,1
    82e8:	e0bfff15 	stw	r2,-4(fp)
	while (i<_Tiempo){
    82ec:	e0ffff17 	ldw	r3,-4(fp)
    82f0:	e0bffe17 	ldw	r2,-8(fp)
    82f4:	18bffa16 	blt	r3,r2,82e0 <Delay+0x18>
	}
}
    82f8:	0001883a 	nop
    82fc:	0001883a 	nop
    8300:	e037883a 	mov	sp,fp
    8304:	df000017 	ldw	fp,0(sp)
    8308:	dec00104 	addi	sp,sp,4
    830c:	f800283a 	ret

00008310 <_printf_r>:
    8310:	defffd04 	addi	sp,sp,-12
    8314:	dfc00015 	stw	ra,0(sp)
    8318:	d9800115 	stw	r6,4(sp)
    831c:	d9c00215 	stw	r7,8(sp)
    8320:	21800217 	ldw	r6,8(r4)
    8324:	00c00074 	movhi	r3,1
    8328:	18e24d04 	addi	r3,r3,-30412
    832c:	30c00115 	stw	r3,4(r6)
    8330:	280d883a 	mov	r6,r5
    8334:	21400217 	ldw	r5,8(r4)
    8338:	d9c00104 	addi	r7,sp,4
    833c:	00084000 	call	8400 <___vfprintf_internal_r>
    8340:	dfc00017 	ldw	ra,0(sp)
    8344:	dec00304 	addi	sp,sp,12
    8348:	f800283a 	ret

0000834c <printf>:
    834c:	defffc04 	addi	sp,sp,-16
    8350:	dfc00015 	stw	ra,0(sp)
    8354:	d9400115 	stw	r5,4(sp)
    8358:	d9800215 	stw	r6,8(sp)
    835c:	d9c00315 	stw	r7,12(sp)
    8360:	00800074 	movhi	r2,1
    8364:	10e95817 	ldw	r3,-23200(r2)
    8368:	00800074 	movhi	r2,1
    836c:	10a24d04 	addi	r2,r2,-30412
    8370:	19400217 	ldw	r5,8(r3)
    8374:	d9800104 	addi	r6,sp,4
    8378:	28800115 	stw	r2,4(r5)
    837c:	200b883a 	mov	r5,r4
    8380:	19000217 	ldw	r4,8(r3)
    8384:	000891c0 	call	891c <__vfprintf_internal>
    8388:	dfc00017 	ldw	ra,0(sp)
    838c:	dec00404 	addi	sp,sp,16
    8390:	f800283a 	ret

00008394 <print_repeat>:
    8394:	defffb04 	addi	sp,sp,-20
    8398:	dc800315 	stw	r18,12(sp)
    839c:	dc400215 	stw	r17,8(sp)
    83a0:	dc000115 	stw	r16,4(sp)
    83a4:	dfc00415 	stw	ra,16(sp)
    83a8:	2025883a 	mov	r18,r4
    83ac:	2823883a 	mov	r17,r5
    83b0:	d9800005 	stb	r6,0(sp)
    83b4:	3821883a 	mov	r16,r7
    83b8:	04000716 	blt	zero,r16,83d8 <print_repeat+0x44>
    83bc:	0005883a 	mov	r2,zero
    83c0:	dfc00417 	ldw	ra,16(sp)
    83c4:	dc800317 	ldw	r18,12(sp)
    83c8:	dc400217 	ldw	r17,8(sp)
    83cc:	dc000117 	ldw	r16,4(sp)
    83d0:	dec00504 	addi	sp,sp,20
    83d4:	f800283a 	ret
    83d8:	88800117 	ldw	r2,4(r17)
    83dc:	01c00044 	movi	r7,1
    83e0:	d80d883a 	mov	r6,sp
    83e4:	880b883a 	mov	r5,r17
    83e8:	9009883a 	mov	r4,r18
    83ec:	103ee83a 	callr	r2
    83f0:	843fffc4 	addi	r16,r16,-1
    83f4:	103ff026 	beq	r2,zero,83b8 <print_repeat+0x24>
    83f8:	00bfffc4 	movi	r2,-1
    83fc:	003ff006 	br	83c0 <print_repeat+0x2c>

00008400 <___vfprintf_internal_r>:
    8400:	deffe604 	addi	sp,sp,-104
    8404:	ddc01715 	stw	r23,92(sp)
    8408:	dd801615 	stw	r22,88(sp)
    840c:	dd401515 	stw	r21,84(sp)
    8410:	dd001415 	stw	r20,80(sp)
    8414:	dcc01315 	stw	r19,76(sp)
    8418:	dc801215 	stw	r18,72(sp)
    841c:	dc401115 	stw	r17,68(sp)
    8420:	dc001015 	stw	r16,64(sp)
    8424:	dfc01915 	stw	ra,100(sp)
    8428:	df001815 	stw	fp,96(sp)
    842c:	2025883a 	mov	r18,r4
    8430:	2823883a 	mov	r17,r5
    8434:	d9800515 	stw	r6,20(sp)
    8438:	382f883a 	mov	r23,r7
    843c:	0021883a 	mov	r16,zero
    8440:	d8000215 	stw	zero,8(sp)
    8444:	d8000015 	stw	zero,0(sp)
    8448:	0029883a 	mov	r20,zero
    844c:	002d883a 	mov	r22,zero
    8450:	0027883a 	mov	r19,zero
    8454:	002b883a 	mov	r21,zero
    8458:	d8000115 	stw	zero,4(sp)
    845c:	0005883a 	mov	r2,zero
    8460:	00000206 	br	846c <___vfprintf_internal_r+0x6c>
    8464:	114000e0 	cmpeqi	r5,r2,3
    8468:	28004e1e 	bne	r5,zero,85a4 <___vfprintf_internal_r+0x1a4>
    846c:	d8c00517 	ldw	r3,20(sp)
    8470:	19000003 	ldbu	r4,0(r3)
    8474:	18c00044 	addi	r3,r3,1
    8478:	d8c00515 	stw	r3,20(sp)
    847c:	20c03fcc 	andi	r3,r4,255
    8480:	18c0201c 	xori	r3,r3,128
    8484:	18ffe004 	addi	r3,r3,-128
    8488:	18001026 	beq	r3,zero,84cc <___vfprintf_internal_r+0xcc>
    848c:	114000a0 	cmpeqi	r5,r2,2
    8490:	28001f1e 	bne	r5,zero,8510 <___vfprintf_internal_r+0x110>
    8494:	114000c8 	cmpgei	r5,r2,3
    8498:	283ff21e 	bne	r5,zero,8464 <___vfprintf_internal_r+0x64>
    849c:	1000181e 	bne	r2,zero,8500 <___vfprintf_internal_r+0x100>
    84a0:	18c00960 	cmpeqi	r3,r3,37
    84a4:	18010e1e 	bne	r3,zero,88e0 <___vfprintf_internal_r+0x4e0>
    84a8:	88800117 	ldw	r2,4(r17)
    84ac:	d9000805 	stb	r4,32(sp)
    84b0:	01c00044 	movi	r7,1
    84b4:	d9800804 	addi	r6,sp,32
    84b8:	880b883a 	mov	r5,r17
    84bc:	9009883a 	mov	r4,r18
    84c0:	103ee83a 	callr	r2
    84c4:	10001e26 	beq	r2,zero,8540 <___vfprintf_internal_r+0x140>
    84c8:	043fffc4 	movi	r16,-1
    84cc:	8005883a 	mov	r2,r16
    84d0:	dfc01917 	ldw	ra,100(sp)
    84d4:	df001817 	ldw	fp,96(sp)
    84d8:	ddc01717 	ldw	r23,92(sp)
    84dc:	dd801617 	ldw	r22,88(sp)
    84e0:	dd401517 	ldw	r21,84(sp)
    84e4:	dd001417 	ldw	r20,80(sp)
    84e8:	dcc01317 	ldw	r19,76(sp)
    84ec:	dc801217 	ldw	r18,72(sp)
    84f0:	dc401117 	ldw	r17,68(sp)
    84f4:	dc001017 	ldw	r16,64(sp)
    84f8:	dec01a04 	addi	sp,sp,104
    84fc:	f800283a 	ret
    8500:	18800c20 	cmpeqi	r2,r3,48
    8504:	1000ff1e 	bne	r2,zero,8904 <___vfprintf_internal_r+0x504>
    8508:	18800958 	cmpnei	r2,r3,37
    850c:	103fe626 	beq	r2,zero,84a8 <___vfprintf_internal_r+0xa8>
    8510:	213ff404 	addi	r4,r4,-48
    8514:	21003fcc 	andi	r4,r4,255
    8518:	208002a8 	cmpgeui	r2,r4,10
    851c:	10000c1e 	bne	r2,zero,8550 <___vfprintf_internal_r+0x150>
    8520:	98bfffe0 	cmpeqi	r2,r19,-1
    8524:	1000081e 	bne	r2,zero,8548 <___vfprintf_internal_r+0x148>
    8528:	980490ba 	slli	r2,r19,2
    852c:	14c5883a 	add	r2,r2,r19
    8530:	1004907a 	slli	r2,r2,1
    8534:	20a7883a 	add	r19,r4,r2
    8538:	00800084 	movi	r2,2
    853c:	003fcb06 	br	846c <___vfprintf_internal_r+0x6c>
    8540:	84000044 	addi	r16,r16,1
    8544:	003fc906 	br	846c <___vfprintf_internal_r+0x6c>
    8548:	0005883a 	mov	r2,zero
    854c:	003ff906 	br	8534 <___vfprintf_internal_r+0x134>
    8550:	18800ba0 	cmpeqi	r2,r3,46
    8554:	1000ef1e 	bne	r2,zero,8914 <___vfprintf_internal_r+0x514>
    8558:	18801b20 	cmpeqi	r2,r3,108
    855c:	1000ec1e 	bne	r2,zero,8910 <___vfprintf_internal_r+0x510>
    8560:	b0bfffe0 	cmpeqi	r2,r22,-1
    8564:	10001c1e 	bne	r2,zero,85d8 <___vfprintf_internal_r+0x1d8>
    8568:	d8000115 	stw	zero,4(sp)
    856c:	18801be0 	cmpeqi	r2,r3,111
    8570:	1000ba1e 	bne	r2,zero,885c <___vfprintf_internal_r+0x45c>
    8574:	18801c08 	cmpgei	r2,r3,112
    8578:	1000581e 	bne	r2,zero,86dc <___vfprintf_internal_r+0x2dc>
    857c:	188018e0 	cmpeqi	r2,r3,99
    8580:	1000bd1e 	bne	r2,zero,8878 <___vfprintf_internal_r+0x478>
    8584:	18801908 	cmpgei	r2,r3,100
    8588:	1000151e 	bne	r2,zero,85e0 <___vfprintf_internal_r+0x1e0>
    858c:	18c01620 	cmpeqi	r3,r3,88
    8590:	183fb226 	beq	r3,zero,845c <___vfprintf_internal_r+0x5c>
    8594:	a800721e 	bne	r21,zero,8760 <___vfprintf_internal_r+0x360>
    8598:	00800044 	movi	r2,1
    859c:	d8800215 	stw	r2,8(sp)
    85a0:	00007006 	br	8764 <___vfprintf_internal_r+0x364>
    85a4:	213ff404 	addi	r4,r4,-48
    85a8:	21003fcc 	andi	r4,r4,255
    85ac:	214002a8 	cmpgeui	r5,r4,10
    85b0:	283fe91e 	bne	r5,zero,8558 <___vfprintf_internal_r+0x158>
    85b4:	b0ffffe0 	cmpeqi	r3,r22,-1
    85b8:	1800051e 	bne	r3,zero,85d0 <___vfprintf_internal_r+0x1d0>
    85bc:	b00690ba 	slli	r3,r22,2
    85c0:	1d87883a 	add	r3,r3,r22
    85c4:	1806907a 	slli	r3,r3,1
    85c8:	20ed883a 	add	r22,r4,r3
    85cc:	003fa706 	br	846c <___vfprintf_internal_r+0x6c>
    85d0:	0007883a 	mov	r3,zero
    85d4:	003ffc06 	br	85c8 <___vfprintf_internal_r+0x1c8>
    85d8:	05800044 	movi	r22,1
    85dc:	003fe306 	br	856c <___vfprintf_internal_r+0x16c>
    85e0:	18801920 	cmpeqi	r2,r3,100
    85e4:	1000021e 	bne	r2,zero,85f0 <___vfprintf_internal_r+0x1f0>
    85e8:	18c01a60 	cmpeqi	r3,r3,105
    85ec:	183f9b26 	beq	r3,zero,845c <___vfprintf_internal_r+0x5c>
    85f0:	b8800104 	addi	r2,r23,4
    85f4:	d8800415 	stw	r2,16(sp)
    85f8:	d8800017 	ldw	r2,0(sp)
    85fc:	10009826 	beq	r2,zero,8860 <___vfprintf_internal_r+0x460>
    8600:	bdc00017 	ldw	r23,0(r23)
    8604:	b8009a0e 	bge	r23,zero,8870 <___vfprintf_internal_r+0x470>
    8608:	05efc83a 	sub	r23,zero,r23
    860c:	02400044 	movi	r9,1
    8610:	df000804 	addi	fp,sp,32
    8614:	e00d883a 	mov	r6,fp
    8618:	b800541e 	bne	r23,zero,876c <___vfprintf_internal_r+0x36c>
    861c:	e185c83a 	sub	r2,fp,r6
    8620:	d8800315 	stw	r2,12(sp)
    8624:	b085c83a 	sub	r2,r22,r2
    8628:	00800b0e 	bge	zero,r2,8658 <___vfprintf_internal_r+0x258>
    862c:	d8c01004 	addi	r3,sp,64
    8630:	e0c0072e 	bgeu	fp,r3,8650 <___vfprintf_internal_r+0x250>
    8634:	e085883a 	add	r2,fp,r2
    8638:	01000c04 	movi	r4,48
    863c:	e7000044 	addi	fp,fp,1
    8640:	e13fffc5 	stb	r4,-1(fp)
    8644:	17000226 	beq	r2,fp,8650 <___vfprintf_internal_r+0x250>
    8648:	d8c01004 	addi	r3,sp,64
    864c:	e0fffb36 	bltu	fp,r3,863c <___vfprintf_internal_r+0x23c>
    8650:	e185c83a 	sub	r2,fp,r6
    8654:	d8800315 	stw	r2,12(sp)
    8658:	d8800317 	ldw	r2,12(sp)
    865c:	4891883a 	add	r8,r9,r2
    8660:	d8800117 	ldw	r2,4(sp)
    8664:	9a2fc83a 	sub	r23,r19,r8
    8668:	10005926 	beq	r2,zero,87d0 <___vfprintf_internal_r+0x3d0>
    866c:	48000a26 	beq	r9,zero,8698 <___vfprintf_internal_r+0x298>
    8670:	00800b44 	movi	r2,45
    8674:	d88007c5 	stb	r2,31(sp)
    8678:	88800117 	ldw	r2,4(r17)
    867c:	01c00044 	movi	r7,1
    8680:	d98007c4 	addi	r6,sp,31
    8684:	880b883a 	mov	r5,r17
    8688:	9009883a 	mov	r4,r18
    868c:	103ee83a 	callr	r2
    8690:	103f8d1e 	bne	r2,zero,84c8 <___vfprintf_internal_r+0xc8>
    8694:	84000044 	addi	r16,r16,1
    8698:	05c0070e 	bge	zero,r23,86b8 <___vfprintf_internal_r+0x2b8>
    869c:	b80f883a 	mov	r7,r23
    86a0:	01800c04 	movi	r6,48
    86a4:	880b883a 	mov	r5,r17
    86a8:	9009883a 	mov	r4,r18
    86ac:	00083940 	call	8394 <print_repeat>
    86b0:	103f851e 	bne	r2,zero,84c8 <___vfprintf_internal_r+0xc8>
    86b4:	85e1883a 	add	r16,r16,r23
    86b8:	d8800317 	ldw	r2,12(sp)
    86bc:	e011883a 	mov	r8,fp
    86c0:	172fc83a 	sub	r23,r2,fp
    86c4:	ba05883a 	add	r2,r23,r8
    86c8:	00805716 	blt	zero,r2,8828 <___vfprintf_internal_r+0x428>
    86cc:	8707883a 	add	r3,r16,fp
    86d0:	ddc00417 	ldw	r23,16(sp)
    86d4:	1a21c83a 	sub	r16,r3,r8
    86d8:	003f6006 	br	845c <___vfprintf_internal_r+0x5c>
    86dc:	18801d60 	cmpeqi	r2,r3,117
    86e0:	10005f1e 	bne	r2,zero,8860 <___vfprintf_internal_r+0x460>
    86e4:	18801e20 	cmpeqi	r2,r3,120
    86e8:	10001e1e 	bne	r2,zero,8764 <___vfprintf_internal_r+0x364>
    86ec:	18c01ce0 	cmpeqi	r3,r3,115
    86f0:	183f5a26 	beq	r3,zero,845c <___vfprintf_internal_r+0x5c>
    86f4:	b8800104 	addi	r2,r23,4
    86f8:	d8800315 	stw	r2,12(sp)
    86fc:	b8800017 	ldw	r2,0(r23)
    8700:	1009883a 	mov	r4,r2
    8704:	1039883a 	mov	fp,r2
    8708:	00089dc0 	call	89dc <strlen>
    870c:	988fc83a 	sub	r7,r19,r2
    8710:	102f883a 	mov	r23,r2
    8714:	01c0080e 	bge	zero,r7,8738 <___vfprintf_internal_r+0x338>
    8718:	01800804 	movi	r6,32
    871c:	880b883a 	mov	r5,r17
    8720:	9009883a 	mov	r4,r18
    8724:	d9c00415 	stw	r7,16(sp)
    8728:	00083940 	call	8394 <print_repeat>
    872c:	103f661e 	bne	r2,zero,84c8 <___vfprintf_internal_r+0xc8>
    8730:	d9c00417 	ldw	r7,16(sp)
    8734:	81e1883a 	add	r16,r16,r7
    8738:	88800117 	ldw	r2,4(r17)
    873c:	b80f883a 	mov	r7,r23
    8740:	e00d883a 	mov	r6,fp
    8744:	880b883a 	mov	r5,r17
    8748:	9009883a 	mov	r4,r18
    874c:	103ee83a 	callr	r2
    8750:	103f5d1e 	bne	r2,zero,84c8 <___vfprintf_internal_r+0xc8>
    8754:	85e1883a 	add	r16,r16,r23
    8758:	ddc00317 	ldw	r23,12(sp)
    875c:	003f4306 	br	846c <___vfprintf_internal_r+0x6c>
    8760:	dd400215 	stw	r21,8(sp)
    8764:	05000404 	movi	r20,16
    8768:	00003d06 	br	8860 <___vfprintf_internal_r+0x460>
    876c:	b809883a 	mov	r4,r23
    8770:	a00b883a 	mov	r5,r20
    8774:	da400615 	stw	r9,24(sp)
    8778:	0008b3c0 	call	8b3c <__udivsi3>
    877c:	1009883a 	mov	r4,r2
    8780:	a00b883a 	mov	r5,r20
    8784:	d8800315 	stw	r2,12(sp)
    8788:	0008bfc0 	call	8bfc <__mulsi3>
    878c:	b8afc83a 	sub	r23,r23,r2
    8790:	b8800288 	cmpgei	r2,r23,10
    8794:	d9000317 	ldw	r4,12(sp)
    8798:	da400617 	ldw	r9,24(sp)
    879c:	d9800804 	addi	r6,sp,32
    87a0:	1000051e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3b8>
    87a4:	bdc00c04 	addi	r23,r23,48
    87a8:	e7000044 	addi	fp,fp,1
    87ac:	e5ffffc5 	stb	r23,-1(fp)
    87b0:	202f883a 	mov	r23,r4
    87b4:	003f9806 	br	8618 <___vfprintf_internal_r+0x218>
    87b8:	d8800217 	ldw	r2,8(sp)
    87bc:	10000226 	beq	r2,zero,87c8 <___vfprintf_internal_r+0x3c8>
    87c0:	bdc00dc4 	addi	r23,r23,55
    87c4:	003ff806 	br	87a8 <___vfprintf_internal_r+0x3a8>
    87c8:	bdc015c4 	addi	r23,r23,87
    87cc:	003ff606 	br	87a8 <___vfprintf_internal_r+0x3a8>
    87d0:	05c0090e 	bge	zero,r23,87f8 <___vfprintf_internal_r+0x3f8>
    87d4:	b80f883a 	mov	r7,r23
    87d8:	01800804 	movi	r6,32
    87dc:	880b883a 	mov	r5,r17
    87e0:	9009883a 	mov	r4,r18
    87e4:	da400615 	stw	r9,24(sp)
    87e8:	00083940 	call	8394 <print_repeat>
    87ec:	103f361e 	bne	r2,zero,84c8 <___vfprintf_internal_r+0xc8>
    87f0:	da400617 	ldw	r9,24(sp)
    87f4:	85e1883a 	add	r16,r16,r23
    87f8:	483faf26 	beq	r9,zero,86b8 <___vfprintf_internal_r+0x2b8>
    87fc:	00800b44 	movi	r2,45
    8800:	d88007c5 	stb	r2,31(sp)
    8804:	88800117 	ldw	r2,4(r17)
    8808:	01c00044 	movi	r7,1
    880c:	d98007c4 	addi	r6,sp,31
    8810:	880b883a 	mov	r5,r17
    8814:	9009883a 	mov	r4,r18
    8818:	103ee83a 	callr	r2
    881c:	103f2a1e 	bne	r2,zero,84c8 <___vfprintf_internal_r+0xc8>
    8820:	84000044 	addi	r16,r16,1
    8824:	003fa406 	br	86b8 <___vfprintf_internal_r+0x2b8>
    8828:	40bfffc3 	ldbu	r2,-1(r8)
    882c:	01c00044 	movi	r7,1
    8830:	423fffc4 	addi	r8,r8,-1
    8834:	d88007c5 	stb	r2,31(sp)
    8838:	88800117 	ldw	r2,4(r17)
    883c:	d98007c4 	addi	r6,sp,31
    8840:	880b883a 	mov	r5,r17
    8844:	9009883a 	mov	r4,r18
    8848:	da000315 	stw	r8,12(sp)
    884c:	103ee83a 	callr	r2
    8850:	da000317 	ldw	r8,12(sp)
    8854:	103f9b26 	beq	r2,zero,86c4 <___vfprintf_internal_r+0x2c4>
    8858:	003f1b06 	br	84c8 <___vfprintf_internal_r+0xc8>
    885c:	05000204 	movi	r20,8
    8860:	b8800104 	addi	r2,r23,4
    8864:	d8800415 	stw	r2,16(sp)
    8868:	bdc00017 	ldw	r23,0(r23)
    886c:	d8000015 	stw	zero,0(sp)
    8870:	0013883a 	mov	r9,zero
    8874:	003f6606 	br	8610 <___vfprintf_internal_r+0x210>
    8878:	98800090 	cmplti	r2,r19,2
    887c:	1000091e 	bne	r2,zero,88a4 <___vfprintf_internal_r+0x4a4>
    8880:	99ffffc4 	addi	r7,r19,-1
    8884:	01800804 	movi	r6,32
    8888:	880b883a 	mov	r5,r17
    888c:	9009883a 	mov	r4,r18
    8890:	d9c00315 	stw	r7,12(sp)
    8894:	00083940 	call	8394 <print_repeat>
    8898:	103f0b1e 	bne	r2,zero,84c8 <___vfprintf_internal_r+0xc8>
    889c:	d9c00317 	ldw	r7,12(sp)
    88a0:	81e1883a 	add	r16,r16,r7
    88a4:	b8800017 	ldw	r2,0(r23)
    88a8:	b8c00104 	addi	r3,r23,4
    88ac:	01c00044 	movi	r7,1
    88b0:	d8800805 	stb	r2,32(sp)
    88b4:	88800117 	ldw	r2,4(r17)
    88b8:	d9800804 	addi	r6,sp,32
    88bc:	880b883a 	mov	r5,r17
    88c0:	9009883a 	mov	r4,r18
    88c4:	d8c00315 	stw	r3,12(sp)
    88c8:	103ee83a 	callr	r2
    88cc:	103efe1e 	bne	r2,zero,84c8 <___vfprintf_internal_r+0xc8>
    88d0:	d8c00317 	ldw	r3,12(sp)
    88d4:	84000044 	addi	r16,r16,1
    88d8:	182f883a 	mov	r23,r3
    88dc:	003ee306 	br	846c <___vfprintf_internal_r+0x6c>
    88e0:	00800044 	movi	r2,1
    88e4:	d8000215 	stw	zero,8(sp)
    88e8:	002b883a 	mov	r21,zero
    88ec:	d8000115 	stw	zero,4(sp)
    88f0:	d8800015 	stw	r2,0(sp)
    88f4:	05000284 	movi	r20,10
    88f8:	05bfffc4 	movi	r22,-1
    88fc:	04ffffc4 	movi	r19,-1
    8900:	003eda06 	br	846c <___vfprintf_internal_r+0x6c>
    8904:	00800044 	movi	r2,1
    8908:	d8800115 	stw	r2,4(sp)
    890c:	003f0a06 	br	8538 <___vfprintf_internal_r+0x138>
    8910:	05400044 	movi	r21,1
    8914:	008000c4 	movi	r2,3
    8918:	003ed406 	br	846c <___vfprintf_internal_r+0x6c>

0000891c <__vfprintf_internal>:
    891c:	00800074 	movhi	r2,1
    8920:	300f883a 	mov	r7,r6
    8924:	280d883a 	mov	r6,r5
    8928:	200b883a 	mov	r5,r4
    892c:	11295817 	ldw	r4,-23200(r2)
    8930:	00084001 	jmpi	8400 <___vfprintf_internal_r>

00008934 <__sfvwrite_small_dev>:
    8934:	2880000b 	ldhu	r2,0(r5)
    8938:	1080020c 	andi	r2,r2,8
    893c:	10002526 	beq	r2,zero,89d4 <__sfvwrite_small_dev+0xa0>
    8940:	2880008f 	ldh	r2,2(r5)
    8944:	defffb04 	addi	sp,sp,-20
    8948:	dcc00315 	stw	r19,12(sp)
    894c:	dc800215 	stw	r18,8(sp)
    8950:	dc400115 	stw	r17,4(sp)
    8954:	dc000015 	stw	r16,0(sp)
    8958:	dfc00415 	stw	ra,16(sp)
    895c:	2027883a 	mov	r19,r4
    8960:	2821883a 	mov	r16,r5
    8964:	3025883a 	mov	r18,r6
    8968:	3823883a 	mov	r17,r7
    896c:	1000100e 	bge	r2,zero,89b0 <__sfvwrite_small_dev+0x7c>
    8970:	8080000b 	ldhu	r2,0(r16)
    8974:	10801014 	ori	r2,r2,64
    8978:	8080000d 	sth	r2,0(r16)
    897c:	00bfffc4 	movi	r2,-1
    8980:	00000d06 	br	89b8 <__sfvwrite_small_dev+0x84>
    8984:	88810050 	cmplti	r2,r17,1025
    8988:	880f883a 	mov	r7,r17
    898c:	1000011e 	bne	r2,zero,8994 <__sfvwrite_small_dev+0x60>
    8990:	01c10004 	movi	r7,1024
    8994:	8140008f 	ldh	r5,2(r16)
    8998:	900d883a 	mov	r6,r18
    899c:	9809883a 	mov	r4,r19
    89a0:	00089f80 	call	89f8 <_write_r>
    89a4:	00bff20e 	bge	zero,r2,8970 <__sfvwrite_small_dev+0x3c>
    89a8:	88a3c83a 	sub	r17,r17,r2
    89ac:	90a5883a 	add	r18,r18,r2
    89b0:	047ff416 	blt	zero,r17,8984 <__sfvwrite_small_dev+0x50>
    89b4:	0005883a 	mov	r2,zero
    89b8:	dfc00417 	ldw	ra,16(sp)
    89bc:	dcc00317 	ldw	r19,12(sp)
    89c0:	dc800217 	ldw	r18,8(sp)
    89c4:	dc400117 	ldw	r17,4(sp)
    89c8:	dc000017 	ldw	r16,0(sp)
    89cc:	dec00504 	addi	sp,sp,20
    89d0:	f800283a 	ret
    89d4:	00bfffc4 	movi	r2,-1
    89d8:	f800283a 	ret

000089dc <strlen>:
    89dc:	2005883a 	mov	r2,r4
    89e0:	10c00007 	ldb	r3,0(r2)
    89e4:	1800021e 	bne	r3,zero,89f0 <strlen+0x14>
    89e8:	1105c83a 	sub	r2,r2,r4
    89ec:	f800283a 	ret
    89f0:	10800044 	addi	r2,r2,1
    89f4:	003ffa06 	br	89e0 <strlen+0x4>

000089f8 <_write_r>:
    89f8:	defffe04 	addi	sp,sp,-8
    89fc:	dc000015 	stw	r16,0(sp)
    8a00:	00800074 	movhi	r2,1
    8a04:	2021883a 	mov	r16,r4
    8a08:	2809883a 	mov	r4,r5
    8a0c:	300b883a 	mov	r5,r6
    8a10:	380d883a 	mov	r6,r7
    8a14:	dfc00115 	stw	ra,4(sp)
    8a18:	102a1b15 	stw	zero,-22420(r2)
    8a1c:	0008db80 	call	8db8 <write>
    8a20:	10ffffd8 	cmpnei	r3,r2,-1
    8a24:	1800041e 	bne	r3,zero,8a38 <_write_r+0x40>
    8a28:	00c00074 	movhi	r3,1
    8a2c:	18ea1b17 	ldw	r3,-22420(r3)
    8a30:	18000126 	beq	r3,zero,8a38 <_write_r+0x40>
    8a34:	80c00015 	stw	r3,0(r16)
    8a38:	dfc00117 	ldw	ra,4(sp)
    8a3c:	dc000017 	ldw	r16,0(sp)
    8a40:	dec00204 	addi	sp,sp,8
    8a44:	f800283a 	ret

00008a48 <__divsi3>:
    8a48:	20001a16 	blt	r4,zero,8ab4 <__divsi3+0x6c>
    8a4c:	000f883a 	mov	r7,zero
    8a50:	2800020e 	bge	r5,zero,8a5c <__divsi3+0x14>
    8a54:	014bc83a 	sub	r5,zero,r5
    8a58:	39c0005c 	xori	r7,r7,1
    8a5c:	200d883a 	mov	r6,r4
    8a60:	00c00044 	movi	r3,1
    8a64:	2900092e 	bgeu	r5,r4,8a8c <__divsi3+0x44>
    8a68:	00800804 	movi	r2,32
    8a6c:	00c00044 	movi	r3,1
    8a70:	00000106 	br	8a78 <__divsi3+0x30>
    8a74:	10001226 	beq	r2,zero,8ac0 <__divsi3+0x78>
    8a78:	294b883a 	add	r5,r5,r5
    8a7c:	10bfffc4 	addi	r2,r2,-1
    8a80:	18c7883a 	add	r3,r3,r3
    8a84:	293ffb36 	bltu	r5,r4,8a74 <__divsi3+0x2c>
    8a88:	18000d26 	beq	r3,zero,8ac0 <__divsi3+0x78>
    8a8c:	0005883a 	mov	r2,zero
    8a90:	31400236 	bltu	r6,r5,8a9c <__divsi3+0x54>
    8a94:	314dc83a 	sub	r6,r6,r5
    8a98:	10c4b03a 	or	r2,r2,r3
    8a9c:	1806d07a 	srli	r3,r3,1
    8aa0:	280ad07a 	srli	r5,r5,1
    8aa4:	183ffa1e 	bne	r3,zero,8a90 <__divsi3+0x48>
    8aa8:	38000126 	beq	r7,zero,8ab0 <__divsi3+0x68>
    8aac:	0085c83a 	sub	r2,zero,r2
    8ab0:	f800283a 	ret
    8ab4:	0109c83a 	sub	r4,zero,r4
    8ab8:	01c00044 	movi	r7,1
    8abc:	003fe406 	br	8a50 <__divsi3+0x8>
    8ac0:	0005883a 	mov	r2,zero
    8ac4:	003ff806 	br	8aa8 <__divsi3+0x60>

00008ac8 <__modsi3>:
    8ac8:	20001716 	blt	r4,zero,8b28 <__modsi3+0x60>
    8acc:	000f883a 	mov	r7,zero
    8ad0:	2005883a 	mov	r2,r4
    8ad4:	2800010e 	bge	r5,zero,8adc <__modsi3+0x14>
    8ad8:	014bc83a 	sub	r5,zero,r5
    8adc:	00c00044 	movi	r3,1
    8ae0:	2900092e 	bgeu	r5,r4,8b08 <__modsi3+0x40>
    8ae4:	01800804 	movi	r6,32
    8ae8:	00c00044 	movi	r3,1
    8aec:	00000106 	br	8af4 <__modsi3+0x2c>
    8af0:	30001026 	beq	r6,zero,8b34 <__modsi3+0x6c>
    8af4:	294b883a 	add	r5,r5,r5
    8af8:	31bfffc4 	addi	r6,r6,-1
    8afc:	18c7883a 	add	r3,r3,r3
    8b00:	293ffb36 	bltu	r5,r4,8af0 <__modsi3+0x28>
    8b04:	18000b26 	beq	r3,zero,8b34 <__modsi3+0x6c>
    8b08:	1806d07a 	srli	r3,r3,1
    8b0c:	11400136 	bltu	r2,r5,8b14 <__modsi3+0x4c>
    8b10:	1145c83a 	sub	r2,r2,r5
    8b14:	280ad07a 	srli	r5,r5,1
    8b18:	183ffb1e 	bne	r3,zero,8b08 <__modsi3+0x40>
    8b1c:	38000126 	beq	r7,zero,8b24 <__modsi3+0x5c>
    8b20:	0085c83a 	sub	r2,zero,r2
    8b24:	f800283a 	ret
    8b28:	0109c83a 	sub	r4,zero,r4
    8b2c:	01c00044 	movi	r7,1
    8b30:	003fe706 	br	8ad0 <__modsi3+0x8>
    8b34:	2005883a 	mov	r2,r4
    8b38:	003ff806 	br	8b1c <__modsi3+0x54>

00008b3c <__udivsi3>:
    8b3c:	200d883a 	mov	r6,r4
    8b40:	2900152e 	bgeu	r5,r4,8b98 <__udivsi3+0x5c>
    8b44:	28001416 	blt	r5,zero,8b98 <__udivsi3+0x5c>
    8b48:	00800804 	movi	r2,32
    8b4c:	00c00044 	movi	r3,1
    8b50:	00000206 	br	8b5c <__udivsi3+0x20>
    8b54:	10000e26 	beq	r2,zero,8b90 <__udivsi3+0x54>
    8b58:	28000416 	blt	r5,zero,8b6c <__udivsi3+0x30>
    8b5c:	294b883a 	add	r5,r5,r5
    8b60:	10bfffc4 	addi	r2,r2,-1
    8b64:	18c7883a 	add	r3,r3,r3
    8b68:	293ffa36 	bltu	r5,r4,8b54 <__udivsi3+0x18>
    8b6c:	18000826 	beq	r3,zero,8b90 <__udivsi3+0x54>
    8b70:	0005883a 	mov	r2,zero
    8b74:	31400236 	bltu	r6,r5,8b80 <__udivsi3+0x44>
    8b78:	314dc83a 	sub	r6,r6,r5
    8b7c:	10c4b03a 	or	r2,r2,r3
    8b80:	1806d07a 	srli	r3,r3,1
    8b84:	280ad07a 	srli	r5,r5,1
    8b88:	183ffa1e 	bne	r3,zero,8b74 <__udivsi3+0x38>
    8b8c:	f800283a 	ret
    8b90:	0005883a 	mov	r2,zero
    8b94:	f800283a 	ret
    8b98:	00c00044 	movi	r3,1
    8b9c:	003ff406 	br	8b70 <__udivsi3+0x34>

00008ba0 <__umodsi3>:
    8ba0:	2005883a 	mov	r2,r4
    8ba4:	2900132e 	bgeu	r5,r4,8bf4 <__umodsi3+0x54>
    8ba8:	28001216 	blt	r5,zero,8bf4 <__umodsi3+0x54>
    8bac:	01800804 	movi	r6,32
    8bb0:	00c00044 	movi	r3,1
    8bb4:	00000206 	br	8bc0 <__umodsi3+0x20>
    8bb8:	30000c26 	beq	r6,zero,8bec <__umodsi3+0x4c>
    8bbc:	28000416 	blt	r5,zero,8bd0 <__umodsi3+0x30>
    8bc0:	294b883a 	add	r5,r5,r5
    8bc4:	31bfffc4 	addi	r6,r6,-1
    8bc8:	18c7883a 	add	r3,r3,r3
    8bcc:	293ffa36 	bltu	r5,r4,8bb8 <__umodsi3+0x18>
    8bd0:	18000626 	beq	r3,zero,8bec <__umodsi3+0x4c>
    8bd4:	1806d07a 	srli	r3,r3,1
    8bd8:	11400136 	bltu	r2,r5,8be0 <__umodsi3+0x40>
    8bdc:	1145c83a 	sub	r2,r2,r5
    8be0:	280ad07a 	srli	r5,r5,1
    8be4:	183ffb1e 	bne	r3,zero,8bd4 <__umodsi3+0x34>
    8be8:	f800283a 	ret
    8bec:	2005883a 	mov	r2,r4
    8bf0:	f800283a 	ret
    8bf4:	00c00044 	movi	r3,1
    8bf8:	003ff606 	br	8bd4 <__umodsi3+0x34>

00008bfc <__mulsi3>:
    8bfc:	0005883a 	mov	r2,zero
    8c00:	20000726 	beq	r4,zero,8c20 <__mulsi3+0x24>
    8c04:	20c0004c 	andi	r3,r4,1
    8c08:	2008d07a 	srli	r4,r4,1
    8c0c:	18000126 	beq	r3,zero,8c14 <__mulsi3+0x18>
    8c10:	1145883a 	add	r2,r2,r5
    8c14:	294b883a 	add	r5,r5,r5
    8c18:	203ffa1e 	bne	r4,zero,8c04 <__mulsi3+0x8>
    8c1c:	f800283a 	ret
    8c20:	f800283a 	ret

00008c24 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8c24:	defffc04 	addi	sp,sp,-16
    8c28:	df000315 	stw	fp,12(sp)
    8c2c:	df000304 	addi	fp,sp,12
    8c30:	e13fff15 	stw	r4,-4(fp)
    8c34:	e17ffe15 	stw	r5,-8(fp)
    8c38:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    8c3c:	e0fffe17 	ldw	r3,-8(fp)
    8c40:	e0bfff17 	ldw	r2,-4(fp)
    8c44:	18800c26 	beq	r3,r2,8c78 <alt_load_section+0x54>
  {
    while( to != end )
    8c48:	00000806 	br	8c6c <alt_load_section+0x48>
    {
      *to++ = *from++;
    8c4c:	e0ffff17 	ldw	r3,-4(fp)
    8c50:	18800104 	addi	r2,r3,4
    8c54:	e0bfff15 	stw	r2,-4(fp)
    8c58:	e0bffe17 	ldw	r2,-8(fp)
    8c5c:	11000104 	addi	r4,r2,4
    8c60:	e13ffe15 	stw	r4,-8(fp)
    8c64:	18c00017 	ldw	r3,0(r3)
    8c68:	10c00015 	stw	r3,0(r2)
    while( to != end )
    8c6c:	e0fffe17 	ldw	r3,-8(fp)
    8c70:	e0bffd17 	ldw	r2,-12(fp)
    8c74:	18bff51e 	bne	r3,r2,8c4c <alt_load_section+0x28>
    }
  }
}
    8c78:	0001883a 	nop
    8c7c:	e037883a 	mov	sp,fp
    8c80:	df000017 	ldw	fp,0(sp)
    8c84:	dec00104 	addi	sp,sp,4
    8c88:	f800283a 	ret

00008c8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8c8c:	defffe04 	addi	sp,sp,-8
    8c90:	dfc00115 	stw	ra,4(sp)
    8c94:	df000015 	stw	fp,0(sp)
    8c98:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8c9c:	01800074 	movhi	r6,1
    8ca0:	31a96204 	addi	r6,r6,-23160
    8ca4:	01400074 	movhi	r5,1
    8ca8:	2968a904 	addi	r5,r5,-23900
    8cac:	01000074 	movhi	r4,1
    8cb0:	21296204 	addi	r4,r4,-23160
    8cb4:	0008c240 	call	8c24 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8cb8:	01800074 	movhi	r6,1
    8cbc:	31a08904 	addi	r6,r6,-32220
    8cc0:	01400074 	movhi	r5,1
    8cc4:	29600804 	addi	r5,r5,-32736
    8cc8:	01000074 	movhi	r4,1
    8ccc:	21200804 	addi	r4,r4,-32736
    8cd0:	0008c240 	call	8c24 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8cd4:	01800074 	movhi	r6,1
    8cd8:	31a8a904 	addi	r6,r6,-23900
    8cdc:	01400074 	movhi	r5,1
    8ce0:	29689904 	addi	r5,r5,-23964
    8ce4:	01000074 	movhi	r4,1
    8ce8:	21289904 	addi	r4,r4,-23964
    8cec:	0008c240 	call	8c24 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8cf0:	00093d40 	call	93d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8cf4:	00095040 	call	9504 <alt_icache_flush_all>
}
    8cf8:	0001883a 	nop
    8cfc:	e037883a 	mov	sp,fp
    8d00:	dfc00117 	ldw	ra,4(sp)
    8d04:	df000017 	ldw	fp,0(sp)
    8d08:	dec00204 	addi	sp,sp,8
    8d0c:	f800283a 	ret

00008d10 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8d10:	defffd04 	addi	sp,sp,-12
    8d14:	dfc00215 	stw	ra,8(sp)
    8d18:	df000115 	stw	fp,4(sp)
    8d1c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8d20:	0009883a 	mov	r4,zero
    8d24:	0008ef00 	call	8ef0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8d28:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8d2c:	0008f2c0 	call	8f2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8d30:	01800074 	movhi	r6,1
    8d34:	31a89e04 	addi	r6,r6,-23944
    8d38:	01400074 	movhi	r5,1
    8d3c:	29689e04 	addi	r5,r5,-23944
    8d40:	01000074 	movhi	r4,1
    8d44:	21289e04 	addi	r4,r4,-23944
    8d48:	00098900 	call	9890 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8d4c:	d0a0c517 	ldw	r2,-31980(gp)
    8d50:	d0e0c617 	ldw	r3,-31976(gp)
    8d54:	d120c717 	ldw	r4,-31972(gp)
    8d58:	200d883a 	mov	r6,r4
    8d5c:	180b883a 	mov	r5,r3
    8d60:	1009883a 	mov	r4,r2
    8d64:	00082600 	call	8260 <main>
    8d68:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8d6c:	01000044 	movi	r4,1
    8d70:	00092f80 	call	92f8 <close>
  exit (result);
    8d74:	e13fff17 	ldw	r4,-4(fp)
    8d78:	000a0ac0 	call	a0ac <exit>

00008d7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8d7c:	defffe04 	addi	sp,sp,-8
    8d80:	dfc00115 	stw	ra,4(sp)
    8d84:	df000015 	stw	fp,0(sp)
    8d88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8d8c:	d0a00717 	ldw	r2,-32740(gp)
    8d90:	10000326 	beq	r2,zero,8da0 <alt_get_errno+0x24>
    8d94:	d0a00717 	ldw	r2,-32740(gp)
    8d98:	103ee83a 	callr	r2
    8d9c:	00000106 	br	8da4 <alt_get_errno+0x28>
    8da0:	d0a0c404 	addi	r2,gp,-31984
}
    8da4:	e037883a 	mov	sp,fp
    8da8:	dfc00117 	ldw	ra,4(sp)
    8dac:	df000017 	ldw	fp,0(sp)
    8db0:	dec00204 	addi	sp,sp,8
    8db4:	f800283a 	ret

00008db8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8db8:	defff904 	addi	sp,sp,-28
    8dbc:	dfc00615 	stw	ra,24(sp)
    8dc0:	df000515 	stw	fp,20(sp)
    8dc4:	df000504 	addi	fp,sp,20
    8dc8:	e13ffd15 	stw	r4,-12(fp)
    8dcc:	e17ffc15 	stw	r5,-16(fp)
    8dd0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8dd4:	e0bffd17 	ldw	r2,-12(fp)
    8dd8:	10000916 	blt	r2,zero,8e00 <write+0x48>
    8ddc:	e0fffd17 	ldw	r3,-12(fp)
    8de0:	1805883a 	mov	r2,r3
    8de4:	1085883a 	add	r2,r2,r2
    8de8:	10c5883a 	add	r2,r2,r3
    8dec:	100490ba 	slli	r2,r2,2
    8df0:	00c00074 	movhi	r3,1
    8df4:	18e8f704 	addi	r3,r3,-23588
    8df8:	10c5883a 	add	r2,r2,r3
    8dfc:	00000106 	br	8e04 <write+0x4c>
    8e00:	0005883a 	mov	r2,zero
    8e04:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    8e08:	e0bfff17 	ldw	r2,-4(fp)
    8e0c:	10002126 	beq	r2,zero,8e94 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8e10:	e0bfff17 	ldw	r2,-4(fp)
    8e14:	10800217 	ldw	r2,8(r2)
    8e18:	108000cc 	andi	r2,r2,3
    8e1c:	10001826 	beq	r2,zero,8e80 <write+0xc8>
    8e20:	e0bfff17 	ldw	r2,-4(fp)
    8e24:	10800017 	ldw	r2,0(r2)
    8e28:	10800617 	ldw	r2,24(r2)
    8e2c:	10001426 	beq	r2,zero,8e80 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8e30:	e0bfff17 	ldw	r2,-4(fp)
    8e34:	10800017 	ldw	r2,0(r2)
    8e38:	10800617 	ldw	r2,24(r2)
    8e3c:	e0fffb17 	ldw	r3,-20(fp)
    8e40:	180d883a 	mov	r6,r3
    8e44:	e17ffc17 	ldw	r5,-16(fp)
    8e48:	e13fff17 	ldw	r4,-4(fp)
    8e4c:	103ee83a 	callr	r2
    8e50:	e0bffe15 	stw	r2,-8(fp)
    8e54:	e0bffe17 	ldw	r2,-8(fp)
    8e58:	1000070e 	bge	r2,zero,8e78 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    8e5c:	0008d7c0 	call	8d7c <alt_get_errno>
    8e60:	1007883a 	mov	r3,r2
    8e64:	e0bffe17 	ldw	r2,-8(fp)
    8e68:	0085c83a 	sub	r2,zero,r2
    8e6c:	18800015 	stw	r2,0(r3)
        return -1;
    8e70:	00bfffc4 	movi	r2,-1
    8e74:	00000c06 	br	8ea8 <write+0xf0>
      }
      return rval;
    8e78:	e0bffe17 	ldw	r2,-8(fp)
    8e7c:	00000a06 	br	8ea8 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8e80:	0008d7c0 	call	8d7c <alt_get_errno>
    8e84:	1007883a 	mov	r3,r2
    8e88:	00800344 	movi	r2,13
    8e8c:	18800015 	stw	r2,0(r3)
    8e90:	00000406 	br	8ea4 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8e94:	0008d7c0 	call	8d7c <alt_get_errno>
    8e98:	1007883a 	mov	r3,r2
    8e9c:	00801444 	movi	r2,81
    8ea0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    8ea4:	00bfffc4 	movi	r2,-1
}
    8ea8:	e037883a 	mov	sp,fp
    8eac:	dfc00117 	ldw	ra,4(sp)
    8eb0:	df000017 	ldw	fp,0(sp)
    8eb4:	dec00204 	addi	sp,sp,8
    8eb8:	f800283a 	ret

00008ebc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8ebc:	defffd04 	addi	sp,sp,-12
    8ec0:	dfc00215 	stw	ra,8(sp)
    8ec4:	df000115 	stw	fp,4(sp)
    8ec8:	df000104 	addi	fp,sp,4
    8ecc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8ed0:	d1600404 	addi	r5,gp,-32752
    8ed4:	e13fff17 	ldw	r4,-4(fp)
    8ed8:	000945c0 	call	945c <alt_dev_llist_insert>
}
    8edc:	e037883a 	mov	sp,fp
    8ee0:	dfc00117 	ldw	ra,4(sp)
    8ee4:	df000017 	ldw	fp,0(sp)
    8ee8:	dec00204 	addi	sp,sp,8
    8eec:	f800283a 	ret

00008ef0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8ef0:	defffd04 	addi	sp,sp,-12
    8ef4:	dfc00215 	stw	ra,8(sp)
    8ef8:	df000115 	stw	fp,4(sp)
    8efc:	df000104 	addi	fp,sp,4
    8f00:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    8f04:	0009dc40 	call	9dc4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8f08:	00800044 	movi	r2,1
    8f0c:	1001703a 	wrctl	status,r2
}
    8f10:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    8f14:	0001883a 	nop
    8f18:	e037883a 	mov	sp,fp
    8f1c:	dfc00117 	ldw	ra,4(sp)
    8f20:	df000017 	ldw	fp,0(sp)
    8f24:	dec00204 	addi	sp,sp,8
    8f28:	f800283a 	ret

00008f2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8f2c:	defffe04 	addi	sp,sp,-8
    8f30:	dfc00115 	stw	ra,4(sp)
    8f34:	df000015 	stw	fp,0(sp)
    8f38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    8f3c:	01c0fa04 	movi	r7,1000
    8f40:	01800044 	movi	r6,1
    8f44:	000b883a 	mov	r5,zero
    8f48:	01000074 	movhi	r4,1
    8f4c:	21040004 	addi	r4,r4,4096
    8f50:	00092380 	call	9238 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    8f54:	01000074 	movhi	r4,1
    8f58:	2128e204 	addi	r4,r4,-23672
    8f5c:	0008ebc0 	call	8ebc <alt_dev_reg>
}
    8f60:	0001883a 	nop
    8f64:	e037883a 	mov	sp,fp
    8f68:	dfc00117 	ldw	ra,4(sp)
    8f6c:	df000017 	ldw	fp,0(sp)
    8f70:	dec00204 	addi	sp,sp,8
    8f74:	f800283a 	ret

00008f78 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8f78:	defffa04 	addi	sp,sp,-24
    8f7c:	dfc00515 	stw	ra,20(sp)
    8f80:	df000415 	stw	fp,16(sp)
    8f84:	df000404 	addi	fp,sp,16
    8f88:	e13ffe15 	stw	r4,-8(fp)
    8f8c:	e17ffd15 	stw	r5,-12(fp)
    8f90:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8f94:	e0bffe17 	ldw	r2,-8(fp)
    8f98:	10800017 	ldw	r2,0(r2)
    8f9c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8fa0:	e0bfff17 	ldw	r2,-4(fp)
    8fa4:	10c00a04 	addi	r3,r2,40
    8fa8:	e0bffe17 	ldw	r2,-8(fp)
    8fac:	10800217 	ldw	r2,8(r2)
    8fb0:	100f883a 	mov	r7,r2
    8fb4:	e1bffc17 	ldw	r6,-16(fp)
    8fb8:	e17ffd17 	ldw	r5,-12(fp)
    8fbc:	1809883a 	mov	r4,r3
    8fc0:	00090380 	call	9038 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8fc4:	e037883a 	mov	sp,fp
    8fc8:	dfc00117 	ldw	ra,4(sp)
    8fcc:	df000017 	ldw	fp,0(sp)
    8fd0:	dec00204 	addi	sp,sp,8
    8fd4:	f800283a 	ret

00008fd8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8fd8:	defffa04 	addi	sp,sp,-24
    8fdc:	dfc00515 	stw	ra,20(sp)
    8fe0:	df000415 	stw	fp,16(sp)
    8fe4:	df000404 	addi	fp,sp,16
    8fe8:	e13ffe15 	stw	r4,-8(fp)
    8fec:	e17ffd15 	stw	r5,-12(fp)
    8ff0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8ff4:	e0bffe17 	ldw	r2,-8(fp)
    8ff8:	10800017 	ldw	r2,0(r2)
    8ffc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9000:	e0bfff17 	ldw	r2,-4(fp)
    9004:	10c00a04 	addi	r3,r2,40
    9008:	e0bffe17 	ldw	r2,-8(fp)
    900c:	10800217 	ldw	r2,8(r2)
    9010:	100f883a 	mov	r7,r2
    9014:	e1bffc17 	ldw	r6,-16(fp)
    9018:	e17ffd17 	ldw	r5,-12(fp)
    901c:	1809883a 	mov	r4,r3
    9020:	00091240 	call	9124 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9024:	e037883a 	mov	sp,fp
    9028:	dfc00117 	ldw	ra,4(sp)
    902c:	df000017 	ldw	fp,0(sp)
    9030:	dec00204 	addi	sp,sp,8
    9034:	f800283a 	ret

00009038 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9038:	defff704 	addi	sp,sp,-36
    903c:	df000815 	stw	fp,32(sp)
    9040:	df000804 	addi	fp,sp,32
    9044:	e13ffb15 	stw	r4,-20(fp)
    9048:	e17ffa15 	stw	r5,-24(fp)
    904c:	e1bff915 	stw	r6,-28(fp)
    9050:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
    9054:	e0bffb17 	ldw	r2,-20(fp)
    9058:	10800017 	ldw	r2,0(r2)
    905c:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
    9060:	e0bffa17 	ldw	r2,-24(fp)
    9064:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
    9068:	e0bff917 	ldw	r2,-28(fp)
    906c:	e0fffa17 	ldw	r3,-24(fp)
    9070:	1885883a 	add	r2,r3,r2
    9074:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    9078:	00001206 	br	90c4 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    907c:	e0bffe17 	ldw	r2,-8(fp)
    9080:	10800037 	ldwio	r2,0(r2)
    9084:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9088:	e0bffc17 	ldw	r2,-16(fp)
    908c:	10a0000c 	andi	r2,r2,32768
    9090:	10000626 	beq	r2,zero,90ac <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9094:	e0bfff17 	ldw	r2,-4(fp)
    9098:	10c00044 	addi	r3,r2,1
    909c:	e0ffff15 	stw	r3,-4(fp)
    90a0:	e0fffc17 	ldw	r3,-16(fp)
    90a4:	10c00005 	stb	r3,0(r2)
    90a8:	00000606 	br	90c4 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    90ac:	e0ffff17 	ldw	r3,-4(fp)
    90b0:	e0bffa17 	ldw	r2,-24(fp)
    90b4:	1880071e 	bne	r3,r2,90d4 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    90b8:	e0bff817 	ldw	r2,-32(fp)
    90bc:	1090000c 	andi	r2,r2,16384
    90c0:	1000061e 	bne	r2,zero,90dc <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
    90c4:	e0ffff17 	ldw	r3,-4(fp)
    90c8:	e0bffd17 	ldw	r2,-12(fp)
    90cc:	18bfeb36 	bltu	r3,r2,907c <altera_avalon_jtag_uart_read+0x44>
    90d0:	00000306 	br	90e0 <altera_avalon_jtag_uart_read+0xa8>
      break;
    90d4:	0001883a 	nop
    90d8:	00000106 	br	90e0 <altera_avalon_jtag_uart_read+0xa8>
      break;   
    90dc:	0001883a 	nop
    
  }

  if (ptr != buffer)
    90e0:	e0ffff17 	ldw	r3,-4(fp)
    90e4:	e0bffa17 	ldw	r2,-24(fp)
    90e8:	18800426 	beq	r3,r2,90fc <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    90ec:	e0ffff17 	ldw	r3,-4(fp)
    90f0:	e0bffa17 	ldw	r2,-24(fp)
    90f4:	1885c83a 	sub	r2,r3,r2
    90f8:	00000606 	br	9114 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    90fc:	e0bff817 	ldw	r2,-32(fp)
    9100:	1090000c 	andi	r2,r2,16384
    9104:	10000226 	beq	r2,zero,9110 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    9108:	00bffd44 	movi	r2,-11
    910c:	00000106 	br	9114 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    9110:	00bffec4 	movi	r2,-5
}
    9114:	e037883a 	mov	sp,fp
    9118:	df000017 	ldw	fp,0(sp)
    911c:	dec00104 	addi	sp,sp,4
    9120:	f800283a 	ret

00009124 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9124:	defff904 	addi	sp,sp,-28
    9128:	df000615 	stw	fp,24(sp)
    912c:	df000604 	addi	fp,sp,24
    9130:	e13ffd15 	stw	r4,-12(fp)
    9134:	e17ffc15 	stw	r5,-16(fp)
    9138:	e1bffb15 	stw	r6,-20(fp)
    913c:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    9140:	e0bffd17 	ldw	r2,-12(fp)
    9144:	10800017 	ldw	r2,0(r2)
    9148:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
    914c:	e0bffb17 	ldw	r2,-20(fp)
    9150:	e0fffc17 	ldw	r3,-16(fp)
    9154:	1885883a 	add	r2,r3,r2
    9158:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
    915c:	00000f06 	br	919c <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9160:	e0bfff17 	ldw	r2,-4(fp)
    9164:	10800104 	addi	r2,r2,4
    9168:	10800037 	ldwio	r2,0(r2)
    916c:	1007883a 	mov	r3,r2
    9170:	00bfffd4 	movui	r2,65535
    9174:	10c0092e 	bgeu	r2,r3,919c <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9178:	e0ffff17 	ldw	r3,-4(fp)
    917c:	e0bffc17 	ldw	r2,-16(fp)
    9180:	11000044 	addi	r4,r2,1
    9184:	e13ffc15 	stw	r4,-16(fp)
    9188:	10800003 	ldbu	r2,0(r2)
    918c:	10803fcc 	andi	r2,r2,255
    9190:	1080201c 	xori	r2,r2,128
    9194:	10bfe004 	addi	r2,r2,-128
    9198:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
    919c:	e0fffc17 	ldw	r3,-16(fp)
    91a0:	e0bffe17 	ldw	r2,-8(fp)
    91a4:	18bfee36 	bltu	r3,r2,9160 <altera_avalon_jtag_uart_write+0x3c>

  return count;
    91a8:	e0bffb17 	ldw	r2,-20(fp)
}
    91ac:	e037883a 	mov	sp,fp
    91b0:	df000017 	ldw	fp,0(sp)
    91b4:	dec00104 	addi	sp,sp,4
    91b8:	f800283a 	ret

000091bc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    91bc:	defffa04 	addi	sp,sp,-24
    91c0:	dfc00515 	stw	ra,20(sp)
    91c4:	df000415 	stw	fp,16(sp)
    91c8:	df000404 	addi	fp,sp,16
    91cc:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    91d0:	0007883a 	mov	r3,zero
    91d4:	e0bffc17 	ldw	r2,-16(fp)
    91d8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    91dc:	e0bffc17 	ldw	r2,-16(fp)
    91e0:	10800104 	addi	r2,r2,4
    91e4:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    91e8:	0005303a 	rdctl	r2,status
    91ec:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91f0:	e0fffd17 	ldw	r3,-12(fp)
    91f4:	00bfff84 	movi	r2,-2
    91f8:	1884703a 	and	r2,r3,r2
    91fc:	1001703a 	wrctl	status,r2
  return context;
    9200:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9204:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    9208:	0009c980 	call	9c98 <alt_tick>
    920c:	e0bfff17 	ldw	r2,-4(fp)
    9210:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    9214:	e0bffe17 	ldw	r2,-8(fp)
    9218:	1001703a 	wrctl	status,r2
}
    921c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    9220:	0001883a 	nop
    9224:	e037883a 	mov	sp,fp
    9228:	dfc00117 	ldw	ra,4(sp)
    922c:	df000017 	ldw	fp,0(sp)
    9230:	dec00204 	addi	sp,sp,8
    9234:	f800283a 	ret

00009238 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9238:	defff804 	addi	sp,sp,-32
    923c:	dfc00715 	stw	ra,28(sp)
    9240:	df000615 	stw	fp,24(sp)
    9244:	df000604 	addi	fp,sp,24
    9248:	e13ffe15 	stw	r4,-8(fp)
    924c:	e17ffd15 	stw	r5,-12(fp)
    9250:	e1bffc15 	stw	r6,-16(fp)
    9254:	e1fffb15 	stw	r7,-20(fp)
    9258:	e0bffb17 	ldw	r2,-20(fp)
    925c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9260:	d0a0c917 	ldw	r2,-31964(gp)
    9264:	1000031e 	bne	r2,zero,9274 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    9268:	e0bfff17 	ldw	r2,-4(fp)
    926c:	d0a0c915 	stw	r2,-31964(gp)
    return 0;
    9270:	00000106 	br	9278 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    9274:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9278:	e0bffe17 	ldw	r2,-8(fp)
    927c:	10800104 	addi	r2,r2,4
    9280:	00c001c4 	movi	r3,7
    9284:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9288:	d8000015 	stw	zero,0(sp)
    928c:	e1fffe17 	ldw	r7,-8(fp)
    9290:	01800074 	movhi	r6,1
    9294:	31a46f04 	addi	r6,r6,-28228
    9298:	e17ffc17 	ldw	r5,-16(fp)
    929c:	e13ffd17 	ldw	r4,-12(fp)
    92a0:	00095240 	call	9524 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    92a4:	0001883a 	nop
    92a8:	e037883a 	mov	sp,fp
    92ac:	dfc00117 	ldw	ra,4(sp)
    92b0:	df000017 	ldw	fp,0(sp)
    92b4:	dec00204 	addi	sp,sp,8
    92b8:	f800283a 	ret

000092bc <alt_get_errno>:
{
    92bc:	defffe04 	addi	sp,sp,-8
    92c0:	dfc00115 	stw	ra,4(sp)
    92c4:	df000015 	stw	fp,0(sp)
    92c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    92cc:	d0a00717 	ldw	r2,-32740(gp)
    92d0:	10000326 	beq	r2,zero,92e0 <alt_get_errno+0x24>
    92d4:	d0a00717 	ldw	r2,-32740(gp)
    92d8:	103ee83a 	callr	r2
    92dc:	00000106 	br	92e4 <alt_get_errno+0x28>
    92e0:	d0a0c404 	addi	r2,gp,-31984
}
    92e4:	e037883a 	mov	sp,fp
    92e8:	dfc00117 	ldw	ra,4(sp)
    92ec:	df000017 	ldw	fp,0(sp)
    92f0:	dec00204 	addi	sp,sp,8
    92f4:	f800283a 	ret

000092f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    92f8:	defffb04 	addi	sp,sp,-20
    92fc:	dfc00415 	stw	ra,16(sp)
    9300:	df000315 	stw	fp,12(sp)
    9304:	df000304 	addi	fp,sp,12
    9308:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    930c:	e0bffd17 	ldw	r2,-12(fp)
    9310:	10000916 	blt	r2,zero,9338 <close+0x40>
    9314:	e0fffd17 	ldw	r3,-12(fp)
    9318:	1805883a 	mov	r2,r3
    931c:	1085883a 	add	r2,r2,r2
    9320:	10c5883a 	add	r2,r2,r3
    9324:	100490ba 	slli	r2,r2,2
    9328:	00c00074 	movhi	r3,1
    932c:	18e8f704 	addi	r3,r3,-23588
    9330:	10c5883a 	add	r2,r2,r3
    9334:	00000106 	br	933c <close+0x44>
    9338:	0005883a 	mov	r2,zero
    933c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    9340:	e0bfff17 	ldw	r2,-4(fp)
    9344:	10001926 	beq	r2,zero,93ac <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9348:	e0bfff17 	ldw	r2,-4(fp)
    934c:	10800017 	ldw	r2,0(r2)
    9350:	10800417 	ldw	r2,16(r2)
    9354:	10000626 	beq	r2,zero,9370 <close+0x78>
    9358:	e0bfff17 	ldw	r2,-4(fp)
    935c:	10800017 	ldw	r2,0(r2)
    9360:	10800417 	ldw	r2,16(r2)
    9364:	e13fff17 	ldw	r4,-4(fp)
    9368:	103ee83a 	callr	r2
    936c:	00000106 	br	9374 <close+0x7c>
    9370:	0005883a 	mov	r2,zero
    9374:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9378:	e13ffd17 	ldw	r4,-12(fp)
    937c:	0009b840 	call	9b84 <alt_release_fd>
    if (rval < 0)
    9380:	e0bffe17 	ldw	r2,-8(fp)
    9384:	1000070e 	bge	r2,zero,93a4 <close+0xac>
    {
      ALT_ERRNO = -rval;
    9388:	00092bc0 	call	92bc <alt_get_errno>
    938c:	1007883a 	mov	r3,r2
    9390:	e0bffe17 	ldw	r2,-8(fp)
    9394:	0085c83a 	sub	r2,zero,r2
    9398:	18800015 	stw	r2,0(r3)
      return -1;
    939c:	00bfffc4 	movi	r2,-1
    93a0:	00000706 	br	93c0 <close+0xc8>
    }
    return 0;
    93a4:	0005883a 	mov	r2,zero
    93a8:	00000506 	br	93c0 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    93ac:	00092bc0 	call	92bc <alt_get_errno>
    93b0:	1007883a 	mov	r3,r2
    93b4:	00801444 	movi	r2,81
    93b8:	18800015 	stw	r2,0(r3)
    return -1;
    93bc:	00bfffc4 	movi	r2,-1
  }
}
    93c0:	e037883a 	mov	sp,fp
    93c4:	dfc00117 	ldw	ra,4(sp)
    93c8:	df000017 	ldw	fp,0(sp)
    93cc:	dec00204 	addi	sp,sp,8
    93d0:	f800283a 	ret

000093d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    93d4:	deffff04 	addi	sp,sp,-4
    93d8:	df000015 	stw	fp,0(sp)
    93dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    93e0:	0001883a 	nop
    93e4:	e037883a 	mov	sp,fp
    93e8:	df000017 	ldw	fp,0(sp)
    93ec:	dec00104 	addi	sp,sp,4
    93f0:	f800283a 	ret

000093f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    93f4:	defffc04 	addi	sp,sp,-16
    93f8:	df000315 	stw	fp,12(sp)
    93fc:	df000304 	addi	fp,sp,12
    9400:	e13fff15 	stw	r4,-4(fp)
    9404:	e17ffe15 	stw	r5,-8(fp)
    9408:	e1bffd15 	stw	r6,-12(fp)
  return len;
    940c:	e0bffd17 	ldw	r2,-12(fp)
}
    9410:	e037883a 	mov	sp,fp
    9414:	df000017 	ldw	fp,0(sp)
    9418:	dec00104 	addi	sp,sp,4
    941c:	f800283a 	ret

00009420 <alt_get_errno>:
{
    9420:	defffe04 	addi	sp,sp,-8
    9424:	dfc00115 	stw	ra,4(sp)
    9428:	df000015 	stw	fp,0(sp)
    942c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9430:	d0a00717 	ldw	r2,-32740(gp)
    9434:	10000326 	beq	r2,zero,9444 <alt_get_errno+0x24>
    9438:	d0a00717 	ldw	r2,-32740(gp)
    943c:	103ee83a 	callr	r2
    9440:	00000106 	br	9448 <alt_get_errno+0x28>
    9444:	d0a0c404 	addi	r2,gp,-31984
}
    9448:	e037883a 	mov	sp,fp
    944c:	dfc00117 	ldw	ra,4(sp)
    9450:	df000017 	ldw	fp,0(sp)
    9454:	dec00204 	addi	sp,sp,8
    9458:	f800283a 	ret

0000945c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    945c:	defffa04 	addi	sp,sp,-24
    9460:	dfc00515 	stw	ra,20(sp)
    9464:	df000415 	stw	fp,16(sp)
    9468:	df000404 	addi	fp,sp,16
    946c:	e13ffd15 	stw	r4,-12(fp)
    9470:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9474:	e0bffd17 	ldw	r2,-12(fp)
    9478:	10000326 	beq	r2,zero,9488 <alt_dev_llist_insert+0x2c>
    947c:	e0bffd17 	ldw	r2,-12(fp)
    9480:	10800217 	ldw	r2,8(r2)
    9484:	1000061e 	bne	r2,zero,94a0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9488:	00094200 	call	9420 <alt_get_errno>
    948c:	1007883a 	mov	r3,r2
    9490:	00800584 	movi	r2,22
    9494:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9498:	00bffa84 	movi	r2,-22
    949c:	00001406 	br	94f0 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    94a0:	e0bffd17 	ldw	r2,-12(fp)
    94a4:	e0fffc17 	ldw	r3,-16(fp)
    94a8:	e0ffff15 	stw	r3,-4(fp)
    94ac:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    94b0:	e0bffe17 	ldw	r2,-8(fp)
    94b4:	e0ffff17 	ldw	r3,-4(fp)
    94b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    94bc:	e0bfff17 	ldw	r2,-4(fp)
    94c0:	10c00017 	ldw	r3,0(r2)
    94c4:	e0bffe17 	ldw	r2,-8(fp)
    94c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    94cc:	e0bfff17 	ldw	r2,-4(fp)
    94d0:	10800017 	ldw	r2,0(r2)
    94d4:	e0fffe17 	ldw	r3,-8(fp)
    94d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    94dc:	e0bfff17 	ldw	r2,-4(fp)
    94e0:	e0fffe17 	ldw	r3,-8(fp)
    94e4:	10c00015 	stw	r3,0(r2)
}
    94e8:	0001883a 	nop

  return 0;  
    94ec:	0005883a 	mov	r2,zero
}
    94f0:	e037883a 	mov	sp,fp
    94f4:	dfc00117 	ldw	ra,4(sp)
    94f8:	df000017 	ldw	fp,0(sp)
    94fc:	dec00204 	addi	sp,sp,8
    9500:	f800283a 	ret

00009504 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9504:	deffff04 	addi	sp,sp,-4
    9508:	df000015 	stw	fp,0(sp)
    950c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9510:	0001883a 	nop
    9514:	e037883a 	mov	sp,fp
    9518:	df000017 	ldw	fp,0(sp)
    951c:	dec00104 	addi	sp,sp,4
    9520:	f800283a 	ret

00009524 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9524:	defff904 	addi	sp,sp,-28
    9528:	dfc00615 	stw	ra,24(sp)
    952c:	df000515 	stw	fp,20(sp)
    9530:	df000504 	addi	fp,sp,20
    9534:	e13fff15 	stw	r4,-4(fp)
    9538:	e17ffe15 	stw	r5,-8(fp)
    953c:	e1bffd15 	stw	r6,-12(fp)
    9540:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9544:	e0800217 	ldw	r2,8(fp)
    9548:	d8800015 	stw	r2,0(sp)
    954c:	e1fffc17 	ldw	r7,-16(fp)
    9550:	e1bffd17 	ldw	r6,-12(fp)
    9554:	e17ffe17 	ldw	r5,-8(fp)
    9558:	e13fff17 	ldw	r4,-4(fp)
    955c:	00096d40 	call	96d4 <alt_iic_isr_register>
}  
    9560:	e037883a 	mov	sp,fp
    9564:	dfc00117 	ldw	ra,4(sp)
    9568:	df000017 	ldw	fp,0(sp)
    956c:	dec00204 	addi	sp,sp,8
    9570:	f800283a 	ret

00009574 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9574:	defff904 	addi	sp,sp,-28
    9578:	df000615 	stw	fp,24(sp)
    957c:	df000604 	addi	fp,sp,24
    9580:	e13ffb15 	stw	r4,-20(fp)
    9584:	e17ffa15 	stw	r5,-24(fp)
    9588:	e0bffa17 	ldw	r2,-24(fp)
    958c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    9590:	0005303a 	rdctl	r2,status
    9594:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9598:	e0fffe17 	ldw	r3,-8(fp)
    959c:	00bfff84 	movi	r2,-2
    95a0:	1884703a 	and	r2,r3,r2
    95a4:	1001703a 	wrctl	status,r2
  return context;
    95a8:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    95ac:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    95b0:	00c00044 	movi	r3,1
    95b4:	e0bfff17 	ldw	r2,-4(fp)
    95b8:	1884983a 	sll	r2,r3,r2
    95bc:	1007883a 	mov	r3,r2
    95c0:	d0a0c817 	ldw	r2,-31968(gp)
    95c4:	1884b03a 	or	r2,r3,r2
    95c8:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    95cc:	d0a0c817 	ldw	r2,-31968(gp)
    95d0:	100170fa 	wrctl	ienable,r2
    95d4:	e0bffd17 	ldw	r2,-12(fp)
    95d8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    95dc:	e0bffc17 	ldw	r2,-16(fp)
    95e0:	1001703a 	wrctl	status,r2
}
    95e4:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    95e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    95ec:	e037883a 	mov	sp,fp
    95f0:	df000017 	ldw	fp,0(sp)
    95f4:	dec00104 	addi	sp,sp,4
    95f8:	f800283a 	ret

000095fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    95fc:	defff904 	addi	sp,sp,-28
    9600:	df000615 	stw	fp,24(sp)
    9604:	df000604 	addi	fp,sp,24
    9608:	e13ffb15 	stw	r4,-20(fp)
    960c:	e17ffa15 	stw	r5,-24(fp)
    9610:	e0bffa17 	ldw	r2,-24(fp)
    9614:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    9618:	0005303a 	rdctl	r2,status
    961c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9620:	e0fffe17 	ldw	r3,-8(fp)
    9624:	00bfff84 	movi	r2,-2
    9628:	1884703a 	and	r2,r3,r2
    962c:	1001703a 	wrctl	status,r2
  return context;
    9630:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    9634:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    9638:	00c00044 	movi	r3,1
    963c:	e0bfff17 	ldw	r2,-4(fp)
    9640:	1884983a 	sll	r2,r3,r2
    9644:	0084303a 	nor	r2,zero,r2
    9648:	1007883a 	mov	r3,r2
    964c:	d0a0c817 	ldw	r2,-31968(gp)
    9650:	1884703a 	and	r2,r3,r2
    9654:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9658:	d0a0c817 	ldw	r2,-31968(gp)
    965c:	100170fa 	wrctl	ienable,r2
    9660:	e0bffd17 	ldw	r2,-12(fp)
    9664:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9668:	e0bffc17 	ldw	r2,-16(fp)
    966c:	1001703a 	wrctl	status,r2
}
    9670:	0001883a 	nop
  return 0;
    9674:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    9678:	e037883a 	mov	sp,fp
    967c:	df000017 	ldw	fp,0(sp)
    9680:	dec00104 	addi	sp,sp,4
    9684:	f800283a 	ret

00009688 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9688:	defffc04 	addi	sp,sp,-16
    968c:	df000315 	stw	fp,12(sp)
    9690:	df000304 	addi	fp,sp,12
    9694:	e13ffe15 	stw	r4,-8(fp)
    9698:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    969c:	000530fa 	rdctl	r2,ienable
    96a0:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    96a4:	00c00044 	movi	r3,1
    96a8:	e0bffd17 	ldw	r2,-12(fp)
    96ac:	1884983a 	sll	r2,r3,r2
    96b0:	1007883a 	mov	r3,r2
    96b4:	e0bfff17 	ldw	r2,-4(fp)
    96b8:	1884703a 	and	r2,r3,r2
    96bc:	1004c03a 	cmpne	r2,r2,zero
    96c0:	10803fcc 	andi	r2,r2,255
}
    96c4:	e037883a 	mov	sp,fp
    96c8:	df000017 	ldw	fp,0(sp)
    96cc:	dec00104 	addi	sp,sp,4
    96d0:	f800283a 	ret

000096d4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    96d4:	defff504 	addi	sp,sp,-44
    96d8:	dfc00a15 	stw	ra,40(sp)
    96dc:	df000915 	stw	fp,36(sp)
    96e0:	df000904 	addi	fp,sp,36
    96e4:	e13ffa15 	stw	r4,-24(fp)
    96e8:	e17ff915 	stw	r5,-28(fp)
    96ec:	e1bff815 	stw	r6,-32(fp)
    96f0:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    96f4:	00bffa84 	movi	r2,-22
    96f8:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    96fc:	e0bff917 	ldw	r2,-28(fp)
    9700:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9704:	e0bffe17 	ldw	r2,-8(fp)
    9708:	10800808 	cmpgei	r2,r2,32
    970c:	1000251e 	bne	r2,zero,97a4 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
    9710:	0005303a 	rdctl	r2,status
    9714:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9718:	e0fffc17 	ldw	r3,-16(fp)
    971c:	00bfff84 	movi	r2,-2
    9720:	1884703a 	and	r2,r3,r2
    9724:	1001703a 	wrctl	status,r2
  return context;
    9728:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    972c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    9730:	e0bffe17 	ldw	r2,-8(fp)
    9734:	100890fa 	slli	r4,r2,3
    9738:	e0fff817 	ldw	r3,-32(fp)
    973c:	00800074 	movhi	r2,1
    9740:	2085883a 	add	r2,r4,r2
    9744:	10ea2415 	stw	r3,-22384(r2)
    alt_irq[id].context = isr_context;
    9748:	e0bffe17 	ldw	r2,-8(fp)
    974c:	100890fa 	slli	r4,r2,3
    9750:	e0fff717 	ldw	r3,-36(fp)
    9754:	00800074 	movhi	r2,1
    9758:	2085883a 	add	r2,r4,r2
    975c:	10ea2515 	stw	r3,-22380(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9760:	e0bff817 	ldw	r2,-32(fp)
    9764:	10000526 	beq	r2,zero,977c <alt_iic_isr_register+0xa8>
    9768:	e0bffe17 	ldw	r2,-8(fp)
    976c:	100b883a 	mov	r5,r2
    9770:	e13ffa17 	ldw	r4,-24(fp)
    9774:	00095740 	call	9574 <alt_ic_irq_enable>
    9778:	00000406 	br	978c <alt_iic_isr_register+0xb8>
    977c:	e0bffe17 	ldw	r2,-8(fp)
    9780:	100b883a 	mov	r5,r2
    9784:	e13ffa17 	ldw	r4,-24(fp)
    9788:	00095fc0 	call	95fc <alt_ic_irq_disable>
    978c:	e0bfff15 	stw	r2,-4(fp)
    9790:	e0bffd17 	ldw	r2,-12(fp)
    9794:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9798:	e0bffb17 	ldw	r2,-20(fp)
    979c:	1001703a 	wrctl	status,r2
}
    97a0:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    97a4:	e0bfff17 	ldw	r2,-4(fp)
}
    97a8:	e037883a 	mov	sp,fp
    97ac:	dfc00117 	ldw	ra,4(sp)
    97b0:	df000017 	ldw	fp,0(sp)
    97b4:	dec00204 	addi	sp,sp,8
    97b8:	f800283a 	ret

000097bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    97bc:	defff904 	addi	sp,sp,-28
    97c0:	dfc00615 	stw	ra,24(sp)
    97c4:	df000515 	stw	fp,20(sp)
    97c8:	df000504 	addi	fp,sp,20
    97cc:	e13ffe15 	stw	r4,-8(fp)
    97d0:	e17ffd15 	stw	r5,-12(fp)
    97d4:	e1bffc15 	stw	r6,-16(fp)
    97d8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    97dc:	e1bffb17 	ldw	r6,-20(fp)
    97e0:	e17ffc17 	ldw	r5,-16(fp)
    97e4:	e13ffd17 	ldw	r4,-12(fp)
    97e8:	0009a240 	call	9a24 <open>
    97ec:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    97f0:	e0bfff17 	ldw	r2,-4(fp)
    97f4:	10002016 	blt	r2,zero,9878 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    97f8:	e0ffff17 	ldw	r3,-4(fp)
    97fc:	1805883a 	mov	r2,r3
    9800:	1085883a 	add	r2,r2,r2
    9804:	10c5883a 	add	r2,r2,r3
    9808:	100490ba 	slli	r2,r2,2
    980c:	00c00074 	movhi	r3,1
    9810:	10c7883a 	add	r3,r2,r3
    9814:	18e8f717 	ldw	r3,-23588(r3)
    9818:	e0bffe17 	ldw	r2,-8(fp)
    981c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9820:	e0ffff17 	ldw	r3,-4(fp)
    9824:	1805883a 	mov	r2,r3
    9828:	1085883a 	add	r2,r2,r2
    982c:	10c5883a 	add	r2,r2,r3
    9830:	100490ba 	slli	r2,r2,2
    9834:	00c00074 	movhi	r3,1
    9838:	10c7883a 	add	r3,r2,r3
    983c:	18e8f817 	ldw	r3,-23584(r3)
    9840:	e0bffe17 	ldw	r2,-8(fp)
    9844:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9848:	e0ffff17 	ldw	r3,-4(fp)
    984c:	1805883a 	mov	r2,r3
    9850:	1085883a 	add	r2,r2,r2
    9854:	10c5883a 	add	r2,r2,r3
    9858:	100490ba 	slli	r2,r2,2
    985c:	00c00074 	movhi	r3,1
    9860:	10c7883a 	add	r3,r2,r3
    9864:	18e8f917 	ldw	r3,-23580(r3)
    9868:	e0bffe17 	ldw	r2,-8(fp)
    986c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9870:	e13fff17 	ldw	r4,-4(fp)
    9874:	0009b840 	call	9b84 <alt_release_fd>
  }
} 
    9878:	0001883a 	nop
    987c:	e037883a 	mov	sp,fp
    9880:	dfc00117 	ldw	ra,4(sp)
    9884:	df000017 	ldw	fp,0(sp)
    9888:	dec00204 	addi	sp,sp,8
    988c:	f800283a 	ret

00009890 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9890:	defffb04 	addi	sp,sp,-20
    9894:	dfc00415 	stw	ra,16(sp)
    9898:	df000315 	stw	fp,12(sp)
    989c:	df000304 	addi	fp,sp,12
    98a0:	e13fff15 	stw	r4,-4(fp)
    98a4:	e17ffe15 	stw	r5,-8(fp)
    98a8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    98ac:	01c07fc4 	movi	r7,511
    98b0:	01800044 	movi	r6,1
    98b4:	e17fff17 	ldw	r5,-4(fp)
    98b8:	01000074 	movhi	r4,1
    98bc:	2128fa04 	addi	r4,r4,-23576
    98c0:	00097bc0 	call	97bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    98c4:	01c07fc4 	movi	r7,511
    98c8:	000d883a 	mov	r6,zero
    98cc:	e17ffe17 	ldw	r5,-8(fp)
    98d0:	01000074 	movhi	r4,1
    98d4:	2128f704 	addi	r4,r4,-23588
    98d8:	00097bc0 	call	97bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    98dc:	01c07fc4 	movi	r7,511
    98e0:	01800044 	movi	r6,1
    98e4:	e17ffd17 	ldw	r5,-12(fp)
    98e8:	01000074 	movhi	r4,1
    98ec:	2128fd04 	addi	r4,r4,-23564
    98f0:	00097bc0 	call	97bc <alt_open_fd>
}  
    98f4:	0001883a 	nop
    98f8:	e037883a 	mov	sp,fp
    98fc:	dfc00117 	ldw	ra,4(sp)
    9900:	df000017 	ldw	fp,0(sp)
    9904:	dec00204 	addi	sp,sp,8
    9908:	f800283a 	ret

0000990c <alt_get_errno>:
{
    990c:	defffe04 	addi	sp,sp,-8
    9910:	dfc00115 	stw	ra,4(sp)
    9914:	df000015 	stw	fp,0(sp)
    9918:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    991c:	d0a00717 	ldw	r2,-32740(gp)
    9920:	10000326 	beq	r2,zero,9930 <alt_get_errno+0x24>
    9924:	d0a00717 	ldw	r2,-32740(gp)
    9928:	103ee83a 	callr	r2
    992c:	00000106 	br	9934 <alt_get_errno+0x28>
    9930:	d0a0c404 	addi	r2,gp,-31984
}
    9934:	e037883a 	mov	sp,fp
    9938:	dfc00117 	ldw	ra,4(sp)
    993c:	df000017 	ldw	fp,0(sp)
    9940:	dec00204 	addi	sp,sp,8
    9944:	f800283a 	ret

00009948 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9948:	defffd04 	addi	sp,sp,-12
    994c:	df000215 	stw	fp,8(sp)
    9950:	df000204 	addi	fp,sp,8
    9954:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9958:	e0bffe17 	ldw	r2,-8(fp)
    995c:	10800217 	ldw	r2,8(r2)
    9960:	10d00034 	orhi	r3,r2,16384
    9964:	e0bffe17 	ldw	r2,-8(fp)
    9968:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    996c:	e03fff15 	stw	zero,-4(fp)
    9970:	00002306 	br	9a00 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9974:	e0ffff17 	ldw	r3,-4(fp)
    9978:	1805883a 	mov	r2,r3
    997c:	1085883a 	add	r2,r2,r2
    9980:	10c5883a 	add	r2,r2,r3
    9984:	100490ba 	slli	r2,r2,2
    9988:	00c00074 	movhi	r3,1
    998c:	10c7883a 	add	r3,r2,r3
    9990:	18e8f717 	ldw	r3,-23588(r3)
    9994:	e0bffe17 	ldw	r2,-8(fp)
    9998:	10800017 	ldw	r2,0(r2)
    999c:	1880151e 	bne	r3,r2,99f4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    99a0:	e0ffff17 	ldw	r3,-4(fp)
    99a4:	1805883a 	mov	r2,r3
    99a8:	1085883a 	add	r2,r2,r2
    99ac:	10c5883a 	add	r2,r2,r3
    99b0:	100490ba 	slli	r2,r2,2
    99b4:	00c00074 	movhi	r3,1
    99b8:	10c7883a 	add	r3,r2,r3
    99bc:	18a8f917 	ldw	r2,-23580(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    99c0:	10000c0e 	bge	r2,zero,99f4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    99c4:	e0ffff17 	ldw	r3,-4(fp)
    99c8:	1805883a 	mov	r2,r3
    99cc:	1085883a 	add	r2,r2,r2
    99d0:	10c5883a 	add	r2,r2,r3
    99d4:	100490ba 	slli	r2,r2,2
    99d8:	00c00074 	movhi	r3,1
    99dc:	18e8f704 	addi	r3,r3,-23588
    99e0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    99e4:	e0fffe17 	ldw	r3,-8(fp)
    99e8:	18800226 	beq	r3,r2,99f4 <alt_file_locked+0xac>
    {
      return -EACCES;
    99ec:	00bffcc4 	movi	r2,-13
    99f0:	00000806 	br	9a14 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    99f4:	e0bfff17 	ldw	r2,-4(fp)
    99f8:	10800044 	addi	r2,r2,1
    99fc:	e0bfff15 	stw	r2,-4(fp)
    9a00:	d0a00617 	ldw	r2,-32744(gp)
    9a04:	1007883a 	mov	r3,r2
    9a08:	e0bfff17 	ldw	r2,-4(fp)
    9a0c:	18bfd92e 	bgeu	r3,r2,9974 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9a10:	0005883a 	mov	r2,zero
}
    9a14:	e037883a 	mov	sp,fp
    9a18:	df000017 	ldw	fp,0(sp)
    9a1c:	dec00104 	addi	sp,sp,4
    9a20:	f800283a 	ret

00009a24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9a24:	defff604 	addi	sp,sp,-40
    9a28:	dfc00915 	stw	ra,36(sp)
    9a2c:	df000815 	stw	fp,32(sp)
    9a30:	df000804 	addi	fp,sp,32
    9a34:	e13ffa15 	stw	r4,-24(fp)
    9a38:	e17ff915 	stw	r5,-28(fp)
    9a3c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9a40:	00bfffc4 	movi	r2,-1
    9a44:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    9a48:	00bffb44 	movi	r2,-19
    9a4c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    9a50:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9a54:	d1600404 	addi	r5,gp,-32752
    9a58:	e13ffa17 	ldw	r4,-24(fp)
    9a5c:	0009de80 	call	9de8 <alt_find_dev>
    9a60:	e0bfff15 	stw	r2,-4(fp)
    9a64:	e0bfff17 	ldw	r2,-4(fp)
    9a68:	1000051e 	bne	r2,zero,9a80 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9a6c:	e13ffa17 	ldw	r4,-24(fp)
    9a70:	0009e780 	call	9e78 <alt_find_file>
    9a74:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    9a78:	00800044 	movi	r2,1
    9a7c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9a80:	e0bfff17 	ldw	r2,-4(fp)
    9a84:	10002c26 	beq	r2,zero,9b38 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9a88:	e13fff17 	ldw	r4,-4(fp)
    9a8c:	0009f800 	call	9f80 <alt_get_fd>
    9a90:	e0bffe15 	stw	r2,-8(fp)
    9a94:	e0bffe17 	ldw	r2,-8(fp)
    9a98:	1000030e 	bge	r2,zero,9aa8 <open+0x84>
    {
      status = index;
    9a9c:	e0bffe17 	ldw	r2,-8(fp)
    9aa0:	e0bffd15 	stw	r2,-12(fp)
    9aa4:	00002606 	br	9b40 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    9aa8:	e0fffe17 	ldw	r3,-8(fp)
    9aac:	1805883a 	mov	r2,r3
    9ab0:	1085883a 	add	r2,r2,r2
    9ab4:	10c5883a 	add	r2,r2,r3
    9ab8:	100490ba 	slli	r2,r2,2
    9abc:	00c00074 	movhi	r3,1
    9ac0:	18e8f704 	addi	r3,r3,-23588
    9ac4:	10c5883a 	add	r2,r2,r3
    9ac8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9acc:	e0fff917 	ldw	r3,-28(fp)
    9ad0:	00900034 	movhi	r2,16384
    9ad4:	10bfffc4 	addi	r2,r2,-1
    9ad8:	1886703a 	and	r3,r3,r2
    9adc:	e0bffb17 	ldw	r2,-20(fp)
    9ae0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9ae4:	e0bffc17 	ldw	r2,-16(fp)
    9ae8:	1000051e 	bne	r2,zero,9b00 <open+0xdc>
    9aec:	e13ffb17 	ldw	r4,-20(fp)
    9af0:	00099480 	call	9948 <alt_file_locked>
    9af4:	e0bffd15 	stw	r2,-12(fp)
    9af8:	e0bffd17 	ldw	r2,-12(fp)
    9afc:	10001016 	blt	r2,zero,9b40 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9b00:	e0bfff17 	ldw	r2,-4(fp)
    9b04:	10800317 	ldw	r2,12(r2)
    9b08:	10000826 	beq	r2,zero,9b2c <open+0x108>
    9b0c:	e0bfff17 	ldw	r2,-4(fp)
    9b10:	10800317 	ldw	r2,12(r2)
    9b14:	e1fff817 	ldw	r7,-32(fp)
    9b18:	e1bff917 	ldw	r6,-28(fp)
    9b1c:	e17ffa17 	ldw	r5,-24(fp)
    9b20:	e13ffb17 	ldw	r4,-20(fp)
    9b24:	103ee83a 	callr	r2
    9b28:	00000106 	br	9b30 <open+0x10c>
    9b2c:	0005883a 	mov	r2,zero
    9b30:	e0bffd15 	stw	r2,-12(fp)
    9b34:	00000206 	br	9b40 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9b38:	00bffb44 	movi	r2,-19
    9b3c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9b40:	e0bffd17 	ldw	r2,-12(fp)
    9b44:	1000090e 	bge	r2,zero,9b6c <open+0x148>
  {
    alt_release_fd (index);  
    9b48:	e13ffe17 	ldw	r4,-8(fp)
    9b4c:	0009b840 	call	9b84 <alt_release_fd>
    ALT_ERRNO = -status;
    9b50:	000990c0 	call	990c <alt_get_errno>
    9b54:	1007883a 	mov	r3,r2
    9b58:	e0bffd17 	ldw	r2,-12(fp)
    9b5c:	0085c83a 	sub	r2,zero,r2
    9b60:	18800015 	stw	r2,0(r3)
    return -1;
    9b64:	00bfffc4 	movi	r2,-1
    9b68:	00000106 	br	9b70 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    9b6c:	e0bffe17 	ldw	r2,-8(fp)
}
    9b70:	e037883a 	mov	sp,fp
    9b74:	dfc00117 	ldw	ra,4(sp)
    9b78:	df000017 	ldw	fp,0(sp)
    9b7c:	dec00204 	addi	sp,sp,8
    9b80:	f800283a 	ret

00009b84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9b84:	defffe04 	addi	sp,sp,-8
    9b88:	df000115 	stw	fp,4(sp)
    9b8c:	df000104 	addi	fp,sp,4
    9b90:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9b94:	e0bfff17 	ldw	r2,-4(fp)
    9b98:	108000d0 	cmplti	r2,r2,3
    9b9c:	1000101e 	bne	r2,zero,9be0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    9ba0:	e0ffff17 	ldw	r3,-4(fp)
    9ba4:	1805883a 	mov	r2,r3
    9ba8:	1085883a 	add	r2,r2,r2
    9bac:	10c5883a 	add	r2,r2,r3
    9bb0:	100490ba 	slli	r2,r2,2
    9bb4:	00c00074 	movhi	r3,1
    9bb8:	10c7883a 	add	r3,r2,r3
    9bbc:	1828f915 	stw	zero,-23580(r3)
    alt_fd_list[fd].dev      = 0;
    9bc0:	e0ffff17 	ldw	r3,-4(fp)
    9bc4:	1805883a 	mov	r2,r3
    9bc8:	1085883a 	add	r2,r2,r2
    9bcc:	10c5883a 	add	r2,r2,r3
    9bd0:	100490ba 	slli	r2,r2,2
    9bd4:	00c00074 	movhi	r3,1
    9bd8:	10c7883a 	add	r3,r2,r3
    9bdc:	1828f715 	stw	zero,-23588(r3)
  }
}
    9be0:	0001883a 	nop
    9be4:	e037883a 	mov	sp,fp
    9be8:	df000017 	ldw	fp,0(sp)
    9bec:	dec00104 	addi	sp,sp,4
    9bf0:	f800283a 	ret

00009bf4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    9bf4:	defffa04 	addi	sp,sp,-24
    9bf8:	df000515 	stw	fp,20(sp)
    9bfc:	df000504 	addi	fp,sp,20
    9c00:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    9c04:	0005303a 	rdctl	r2,status
    9c08:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c0c:	e0fffc17 	ldw	r3,-16(fp)
    9c10:	00bfff84 	movi	r2,-2
    9c14:	1884703a 	and	r2,r3,r2
    9c18:	1001703a 	wrctl	status,r2
  return context;
    9c1c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    9c20:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    9c24:	e0bffb17 	ldw	r2,-20(fp)
    9c28:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9c2c:	e0bffd17 	ldw	r2,-12(fp)
    9c30:	10800017 	ldw	r2,0(r2)
    9c34:	e0fffd17 	ldw	r3,-12(fp)
    9c38:	18c00117 	ldw	r3,4(r3)
    9c3c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    9c40:	e0bffd17 	ldw	r2,-12(fp)
    9c44:	10800117 	ldw	r2,4(r2)
    9c48:	e0fffd17 	ldw	r3,-12(fp)
    9c4c:	18c00017 	ldw	r3,0(r3)
    9c50:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9c54:	e0bffd17 	ldw	r2,-12(fp)
    9c58:	e0fffd17 	ldw	r3,-12(fp)
    9c5c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    9c60:	e0bffd17 	ldw	r2,-12(fp)
    9c64:	e0fffd17 	ldw	r3,-12(fp)
    9c68:	10c00015 	stw	r3,0(r2)
} 
    9c6c:	0001883a 	nop
    9c70:	e0bfff17 	ldw	r2,-4(fp)
    9c74:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    9c78:	e0bffe17 	ldw	r2,-8(fp)
    9c7c:	1001703a 	wrctl	status,r2
}
    9c80:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    9c84:	0001883a 	nop
    9c88:	e037883a 	mov	sp,fp
    9c8c:	df000017 	ldw	fp,0(sp)
    9c90:	dec00104 	addi	sp,sp,4
    9c94:	f800283a 	ret

00009c98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9c98:	defff904 	addi	sp,sp,-28
    9c9c:	dfc00615 	stw	ra,24(sp)
    9ca0:	df000515 	stw	fp,20(sp)
    9ca4:	dc400415 	stw	r17,16(sp)
    9ca8:	dc000315 	stw	r16,12(sp)
    9cac:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9cb0:	d0a00917 	ldw	r2,-32732(gp)
    9cb4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9cb8:	d120ca17 	ldw	r4,-31960(gp)
    9cbc:	d160cb17 	ldw	r5,-31956(gp)
    9cc0:	01800044 	movi	r6,1
    9cc4:	000f883a 	mov	r7,zero
    9cc8:	2185883a 	add	r2,r4,r6
    9ccc:	1111803a 	cmpltu	r8,r2,r4
    9cd0:	29c7883a 	add	r3,r5,r7
    9cd4:	40c9883a 	add	r4,r8,r3
    9cd8:	2007883a 	mov	r3,r4
    9cdc:	1009883a 	mov	r4,r2
    9ce0:	180b883a 	mov	r5,r3
    9ce4:	d120ca15 	stw	r4,-31960(gp)
    9ce8:	d160cb15 	stw	r5,-31956(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9cec:	00002906 	br	9d94 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
    9cf0:	e0bffd17 	ldw	r2,-12(fp)
    9cf4:	10800017 	ldw	r2,0(r2)
    9cf8:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    9cfc:	e13ffd17 	ldw	r4,-12(fp)
    9d00:	20800217 	ldw	r2,8(r4)
    9d04:	20c00317 	ldw	r3,12(r4)
    9d08:	d120ca17 	ldw	r4,-31960(gp)
    9d0c:	d160cb17 	ldw	r5,-31956(gp)
    9d10:	28c01e36 	bltu	r5,r3,9d8c <alt_tick+0xf4>
    9d14:	1940011e 	bne	r3,r5,9d1c <alt_tick+0x84>
    9d18:	20801c36 	bltu	r4,r2,9d8c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
    9d1c:	e0bffd17 	ldw	r2,-12(fp)
    9d20:	10800417 	ldw	r2,16(r2)
    9d24:	e0fffd17 	ldw	r3,-12(fp)
    9d28:	18c00517 	ldw	r3,20(r3)
    9d2c:	1809883a 	mov	r4,r3
    9d30:	103ee83a 	callr	r2
    9d34:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    9d38:	e0bffb17 	ldw	r2,-20(fp)
    9d3c:	1000031e 	bne	r2,zero,9d4c <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
    9d40:	e13ffd17 	ldw	r4,-12(fp)
    9d44:	0009bf40 	call	9bf4 <alt_alarm_stop>
    9d48:	00001006 	br	9d8c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
    9d4c:	e0bffd17 	ldw	r2,-12(fp)
    9d50:	11000217 	ldw	r4,8(r2)
    9d54:	11400317 	ldw	r5,12(r2)
    9d58:	e0bffb17 	ldw	r2,-20(fp)
    9d5c:	1021883a 	mov	r16,r2
    9d60:	0023883a 	mov	r17,zero
    9d64:	2405883a 	add	r2,r4,r16
    9d68:	110d803a 	cmpltu	r6,r2,r4
    9d6c:	2c47883a 	add	r3,r5,r17
    9d70:	30c9883a 	add	r4,r6,r3
    9d74:	2007883a 	mov	r3,r4
    9d78:	1009883a 	mov	r4,r2
    9d7c:	180b883a 	mov	r5,r3
    9d80:	e0bffd17 	ldw	r2,-12(fp)
    9d84:	11000215 	stw	r4,8(r2)
    9d88:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
    9d8c:	e0bffc17 	ldw	r2,-16(fp)
    9d90:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    9d94:	e0fffd17 	ldw	r3,-12(fp)
    9d98:	d0a00904 	addi	r2,gp,-32732
    9d9c:	18bfd41e 	bne	r3,r2,9cf0 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    9da0:	0001883a 	nop
}
    9da4:	0001883a 	nop
    9da8:	e6fffe04 	addi	sp,fp,-8
    9dac:	dfc00317 	ldw	ra,12(sp)
    9db0:	df000217 	ldw	fp,8(sp)
    9db4:	dc400117 	ldw	r17,4(sp)
    9db8:	dc000017 	ldw	r16,0(sp)
    9dbc:	dec00404 	addi	sp,sp,16
    9dc0:	f800283a 	ret

00009dc4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9dc4:	deffff04 	addi	sp,sp,-4
    9dc8:	df000015 	stw	fp,0(sp)
    9dcc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9dd0:	000170fa 	wrctl	ienable,zero
}
    9dd4:	0001883a 	nop
    9dd8:	e037883a 	mov	sp,fp
    9ddc:	df000017 	ldw	fp,0(sp)
    9de0:	dec00104 	addi	sp,sp,4
    9de4:	f800283a 	ret

00009de8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9de8:	defffa04 	addi	sp,sp,-24
    9dec:	dfc00515 	stw	ra,20(sp)
    9df0:	df000415 	stw	fp,16(sp)
    9df4:	df000404 	addi	fp,sp,16
    9df8:	e13ffd15 	stw	r4,-12(fp)
    9dfc:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9e00:	e0bffc17 	ldw	r2,-16(fp)
    9e04:	10800017 	ldw	r2,0(r2)
    9e08:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9e0c:	e13ffd17 	ldw	r4,-12(fp)
    9e10:	00089dc0 	call	89dc <strlen>
    9e14:	10800044 	addi	r2,r2,1
    9e18:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e1c:	00000d06 	br	9e54 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9e20:	e0bfff17 	ldw	r2,-4(fp)
    9e24:	10800217 	ldw	r2,8(r2)
    9e28:	e0fffe17 	ldw	r3,-8(fp)
    9e2c:	180d883a 	mov	r6,r3
    9e30:	e17ffd17 	ldw	r5,-12(fp)
    9e34:	1009883a 	mov	r4,r2
    9e38:	000a0cc0 	call	a0cc <memcmp>
    9e3c:	1000021e 	bne	r2,zero,9e48 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9e40:	e0bfff17 	ldw	r2,-4(fp)
    9e44:	00000706 	br	9e64 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9e48:	e0bfff17 	ldw	r2,-4(fp)
    9e4c:	10800017 	ldw	r2,0(r2)
    9e50:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    9e54:	e0ffff17 	ldw	r3,-4(fp)
    9e58:	e0bffc17 	ldw	r2,-16(fp)
    9e5c:	18bff01e 	bne	r3,r2,9e20 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    9e60:	0005883a 	mov	r2,zero
}
    9e64:	e037883a 	mov	sp,fp
    9e68:	dfc00117 	ldw	ra,4(sp)
    9e6c:	df000017 	ldw	fp,0(sp)
    9e70:	dec00204 	addi	sp,sp,8
    9e74:	f800283a 	ret

00009e78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9e78:	defffb04 	addi	sp,sp,-20
    9e7c:	dfc00415 	stw	ra,16(sp)
    9e80:	df000315 	stw	fp,12(sp)
    9e84:	df000304 	addi	fp,sp,12
    9e88:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9e8c:	d0a00217 	ldw	r2,-32760(gp)
    9e90:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9e94:	00003106 	br	9f5c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    9e98:	e0bfff17 	ldw	r2,-4(fp)
    9e9c:	10800217 	ldw	r2,8(r2)
    9ea0:	1009883a 	mov	r4,r2
    9ea4:	00089dc0 	call	89dc <strlen>
    9ea8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9eac:	e0bfff17 	ldw	r2,-4(fp)
    9eb0:	10c00217 	ldw	r3,8(r2)
    9eb4:	e0bffe17 	ldw	r2,-8(fp)
    9eb8:	10bfffc4 	addi	r2,r2,-1
    9ebc:	1885883a 	add	r2,r3,r2
    9ec0:	10800003 	ldbu	r2,0(r2)
    9ec4:	10803fcc 	andi	r2,r2,255
    9ec8:	1080201c 	xori	r2,r2,128
    9ecc:	10bfe004 	addi	r2,r2,-128
    9ed0:	10800bd8 	cmpnei	r2,r2,47
    9ed4:	1000031e 	bne	r2,zero,9ee4 <alt_find_file+0x6c>
    {
      len -= 1;
    9ed8:	e0bffe17 	ldw	r2,-8(fp)
    9edc:	10bfffc4 	addi	r2,r2,-1
    9ee0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9ee4:	e0bffe17 	ldw	r2,-8(fp)
    9ee8:	e0fffd17 	ldw	r3,-12(fp)
    9eec:	1885883a 	add	r2,r3,r2
    9ef0:	10800003 	ldbu	r2,0(r2)
    9ef4:	10803fcc 	andi	r2,r2,255
    9ef8:	1080201c 	xori	r2,r2,128
    9efc:	10bfe004 	addi	r2,r2,-128
    9f00:	10800be0 	cmpeqi	r2,r2,47
    9f04:	1000081e 	bne	r2,zero,9f28 <alt_find_file+0xb0>
    9f08:	e0bffe17 	ldw	r2,-8(fp)
    9f0c:	e0fffd17 	ldw	r3,-12(fp)
    9f10:	1885883a 	add	r2,r3,r2
    9f14:	10800003 	ldbu	r2,0(r2)
    9f18:	10803fcc 	andi	r2,r2,255
    9f1c:	1080201c 	xori	r2,r2,128
    9f20:	10bfe004 	addi	r2,r2,-128
    9f24:	10000a1e 	bne	r2,zero,9f50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    9f28:	e0bfff17 	ldw	r2,-4(fp)
    9f2c:	10800217 	ldw	r2,8(r2)
    9f30:	e0fffe17 	ldw	r3,-8(fp)
    9f34:	180d883a 	mov	r6,r3
    9f38:	e17ffd17 	ldw	r5,-12(fp)
    9f3c:	1009883a 	mov	r4,r2
    9f40:	000a0cc0 	call	a0cc <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    9f44:	1000021e 	bne	r2,zero,9f50 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    9f48:	e0bfff17 	ldw	r2,-4(fp)
    9f4c:	00000706 	br	9f6c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    9f50:	e0bfff17 	ldw	r2,-4(fp)
    9f54:	10800017 	ldw	r2,0(r2)
    9f58:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    9f5c:	e0ffff17 	ldw	r3,-4(fp)
    9f60:	d0a00204 	addi	r2,gp,-32760
    9f64:	18bfcc1e 	bne	r3,r2,9e98 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    9f68:	0005883a 	mov	r2,zero
}
    9f6c:	e037883a 	mov	sp,fp
    9f70:	dfc00117 	ldw	ra,4(sp)
    9f74:	df000017 	ldw	fp,0(sp)
    9f78:	dec00204 	addi	sp,sp,8
    9f7c:	f800283a 	ret

00009f80 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9f80:	defffc04 	addi	sp,sp,-16
    9f84:	df000315 	stw	fp,12(sp)
    9f88:	df000304 	addi	fp,sp,12
    9f8c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    9f90:	00bffa04 	movi	r2,-24
    9f94:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9f98:	e03fff15 	stw	zero,-4(fp)
    9f9c:	00001d06 	br	a014 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    9fa0:	e0ffff17 	ldw	r3,-4(fp)
    9fa4:	1805883a 	mov	r2,r3
    9fa8:	1085883a 	add	r2,r2,r2
    9fac:	10c5883a 	add	r2,r2,r3
    9fb0:	100490ba 	slli	r2,r2,2
    9fb4:	00c00074 	movhi	r3,1
    9fb8:	10c7883a 	add	r3,r2,r3
    9fbc:	18a8f717 	ldw	r2,-23588(r3)
    9fc0:	1000111e 	bne	r2,zero,a008 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    9fc4:	e0ffff17 	ldw	r3,-4(fp)
    9fc8:	1805883a 	mov	r2,r3
    9fcc:	1085883a 	add	r2,r2,r2
    9fd0:	10c5883a 	add	r2,r2,r3
    9fd4:	100490ba 	slli	r2,r2,2
    9fd8:	e13ffd17 	ldw	r4,-12(fp)
    9fdc:	00c00074 	movhi	r3,1
    9fe0:	10c7883a 	add	r3,r2,r3
    9fe4:	1928f715 	stw	r4,-23588(r3)
      if (i > alt_max_fd)
    9fe8:	d0e00617 	ldw	r3,-32744(gp)
    9fec:	e0bfff17 	ldw	r2,-4(fp)
    9ff0:	1880020e 	bge	r3,r2,9ffc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    9ff4:	e0bfff17 	ldw	r2,-4(fp)
    9ff8:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    9ffc:	e0bfff17 	ldw	r2,-4(fp)
    a000:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a004:	00000706 	br	a024 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    a008:	e0bfff17 	ldw	r2,-4(fp)
    a00c:	10800044 	addi	r2,r2,1
    a010:	e0bfff15 	stw	r2,-4(fp)
    a014:	e0bfff17 	ldw	r2,-4(fp)
    a018:	10800810 	cmplti	r2,r2,32
    a01c:	103fe01e 	bne	r2,zero,9fa0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    a020:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a024:	e0bffe17 	ldw	r2,-8(fp)
}
    a028:	e037883a 	mov	sp,fp
    a02c:	df000017 	ldw	fp,0(sp)
    a030:	dec00104 	addi	sp,sp,4
    a034:	f800283a 	ret

0000a038 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a038:	defffe04 	addi	sp,sp,-8
    a03c:	df000115 	stw	fp,4(sp)
    a040:	df000104 	addi	fp,sp,4
    a044:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a048:	e0bfff17 	ldw	r2,-4(fp)
    a04c:	10bffe84 	addi	r2,r2,-6
    a050:	10c00428 	cmpgeui	r3,r2,16
    a054:	18c03fcc 	andi	r3,r3,255
    a058:	18000f1e 	bne	r3,zero,a098 <alt_exception_cause_generated_bad_addr+0x60>
    a05c:	00c00044 	movi	r3,1
    a060:	1884983a 	sll	r2,r3,r2
    a064:	10e2c8cc 	andi	r3,r2,35619
    a068:	1806c03a 	cmpne	r3,r3,zero
    a06c:	18c03fcc 	andi	r3,r3,255
    a070:	1800051e 	bne	r3,zero,a088 <alt_exception_cause_generated_bad_addr+0x50>
    a074:	1084100c 	andi	r2,r2,4160
    a078:	1004c03a 	cmpne	r2,r2,zero
    a07c:	10803fcc 	andi	r2,r2,255
    a080:	1000031e 	bne	r2,zero,a090 <alt_exception_cause_generated_bad_addr+0x58>
    a084:	00000406 	br	a098 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a088:	00800044 	movi	r2,1
    a08c:	00000306 	br	a09c <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a090:	0005883a 	mov	r2,zero
    a094:	00000106 	br	a09c <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
    a098:	0005883a 	mov	r2,zero
  }
}
    a09c:	e037883a 	mov	sp,fp
    a0a0:	df000017 	ldw	fp,0(sp)
    a0a4:	dec00104 	addi	sp,sp,4
    a0a8:	f800283a 	ret

0000a0ac <exit>:
    a0ac:	defffe04 	addi	sp,sp,-8
    a0b0:	000b883a 	mov	r5,zero
    a0b4:	dc000015 	stw	r16,0(sp)
    a0b8:	dfc00115 	stw	ra,4(sp)
    a0bc:	2021883a 	mov	r16,r4
    a0c0:	000a0fc0 	call	a0fc <__call_exitprocs>
    a0c4:	8009883a 	mov	r4,r16
    a0c8:	000a2280 	call	a228 <_exit>

0000a0cc <memcmp>:
    a0cc:	0007883a 	mov	r3,zero
    a0d0:	30c0021e 	bne	r6,r3,a0dc <memcmp+0x10>
    a0d4:	0005883a 	mov	r2,zero
    a0d8:	f800283a 	ret
    a0dc:	20c5883a 	add	r2,r4,r3
    a0e0:	18c00044 	addi	r3,r3,1
    a0e4:	28cf883a 	add	r7,r5,r3
    a0e8:	10800003 	ldbu	r2,0(r2)
    a0ec:	39ffffc3 	ldbu	r7,-1(r7)
    a0f0:	11fff726 	beq	r2,r7,a0d0 <memcmp+0x4>
    a0f4:	11c5c83a 	sub	r2,r2,r7
    a0f8:	f800283a 	ret

0000a0fc <__call_exitprocs>:
    a0fc:	defff504 	addi	sp,sp,-44
    a100:	00800074 	movhi	r2,1
    a104:	dd800715 	stw	r22,28(sp)
    a108:	15a95717 	ldw	r22,-23204(r2)
    a10c:	ddc00815 	stw	r23,32(sp)
    a110:	dd000515 	stw	r20,20(sp)
    a114:	dfc00a15 	stw	ra,40(sp)
    a118:	df000915 	stw	fp,36(sp)
    a11c:	dd400615 	stw	r21,24(sp)
    a120:	dcc00415 	stw	r19,16(sp)
    a124:	dc800315 	stw	r18,12(sp)
    a128:	dc400215 	stw	r17,8(sp)
    a12c:	dc000115 	stw	r16,4(sp)
    a130:	d9000015 	stw	r4,0(sp)
    a134:	2829883a 	mov	r20,r5
    a138:	05c00044 	movi	r23,1
    a13c:	b4400d17 	ldw	r17,52(r22)
    a140:	88000726 	beq	r17,zero,a160 <__call_exitprocs+0x64>
    a144:	8c000117 	ldw	r16,4(r17)
    a148:	8cc02217 	ldw	r19,136(r17)
    a14c:	84bfffc4 	addi	r18,r16,-1
    a150:	802090ba 	slli	r16,r16,2
    a154:	9c2b883a 	add	r21,r19,r16
    a158:	8c21883a 	add	r16,r17,r16
    a15c:	90000c0e 	bge	r18,zero,a190 <__call_exitprocs+0x94>
    a160:	dfc00a17 	ldw	ra,40(sp)
    a164:	df000917 	ldw	fp,36(sp)
    a168:	ddc00817 	ldw	r23,32(sp)
    a16c:	dd800717 	ldw	r22,28(sp)
    a170:	dd400617 	ldw	r21,24(sp)
    a174:	dd000517 	ldw	r20,20(sp)
    a178:	dcc00417 	ldw	r19,16(sp)
    a17c:	dc800317 	ldw	r18,12(sp)
    a180:	dc400217 	ldw	r17,8(sp)
    a184:	dc000117 	ldw	r16,4(sp)
    a188:	dec00b04 	addi	sp,sp,44
    a18c:	f800283a 	ret
    a190:	a0000726 	beq	r20,zero,a1b0 <__call_exitprocs+0xb4>
    a194:	9800041e 	bne	r19,zero,a1a8 <__call_exitprocs+0xac>
    a198:	94bfffc4 	addi	r18,r18,-1
    a19c:	ad7fff04 	addi	r21,r21,-4
    a1a0:	843fff04 	addi	r16,r16,-4
    a1a4:	003fed06 	br	a15c <__call_exitprocs+0x60>
    a1a8:	a8c01f17 	ldw	r3,124(r21)
    a1ac:	1d3ffa1e 	bne	r3,r20,a198 <__call_exitprocs+0x9c>
    a1b0:	89000117 	ldw	r4,4(r17)
    a1b4:	80c00117 	ldw	r3,4(r16)
    a1b8:	213fffc4 	addi	r4,r4,-1
    a1bc:	24800e1e 	bne	r4,r18,a1f8 <__call_exitprocs+0xfc>
    a1c0:	8c800115 	stw	r18,4(r17)
    a1c4:	183ff426 	beq	r3,zero,a198 <__call_exitprocs+0x9c>
    a1c8:	8f000117 	ldw	fp,4(r17)
    a1cc:	98000426 	beq	r19,zero,a1e0 <__call_exitprocs+0xe4>
    a1d0:	bc8c983a 	sll	r6,r23,r18
    a1d4:	99004017 	ldw	r4,256(r19)
    a1d8:	3108703a 	and	r4,r6,r4
    a1dc:	2000081e 	bne	r4,zero,a200 <__call_exitprocs+0x104>
    a1e0:	183ee83a 	callr	r3
    a1e4:	89000117 	ldw	r4,4(r17)
    a1e8:	b0c00d17 	ldw	r3,52(r22)
    a1ec:	273fd31e 	bne	r4,fp,a13c <__call_exitprocs+0x40>
    a1f0:	88ffe926 	beq	r17,r3,a198 <__call_exitprocs+0x9c>
    a1f4:	003fd106 	br	a13c <__call_exitprocs+0x40>
    a1f8:	80000115 	stw	zero,4(r16)
    a1fc:	003ff106 	br	a1c4 <__call_exitprocs+0xc8>
    a200:	99404117 	ldw	r5,260(r19)
    a204:	a93fff17 	ldw	r4,-4(r21)
    a208:	314c703a 	and	r6,r6,r5
    a20c:	3000041e 	bne	r6,zero,a220 <__call_exitprocs+0x124>
    a210:	200b883a 	mov	r5,r4
    a214:	d9000017 	ldw	r4,0(sp)
    a218:	183ee83a 	callr	r3
    a21c:	003ff106 	br	a1e4 <__call_exitprocs+0xe8>
    a220:	183ee83a 	callr	r3
    a224:	003fef06 	br	a1e4 <__call_exitprocs+0xe8>

0000a228 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a228:	defffd04 	addi	sp,sp,-12
    a22c:	df000215 	stw	fp,8(sp)
    a230:	df000204 	addi	fp,sp,8
    a234:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a238:	0001883a 	nop
    a23c:	e0bffe17 	ldw	r2,-8(fp)
    a240:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a244:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a248:	10000226 	beq	r2,zero,a254 <_exit+0x2c>
    ALT_SIM_FAIL();
    a24c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    a250:	00000106 	br	a258 <_exit+0x30>
    ALT_SIM_PASS();
    a254:	002af0b0 	cmpltui	zero,zero,43970
}
    a258:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a25c:	0001883a 	nop
    a260:	003ffe06 	br	a25c <_exit+0x34>
